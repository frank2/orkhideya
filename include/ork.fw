#!/bin/bash

source orkhideya
ork_include if
ork_include stdlib

function fw_root
{
   ork_configpath "fw"
   return 0
}

function fw_rule_path
{
   local _rule="$1"
   ork_pathcat "$(fw_root)" "$ORK_FW_RULES"
   return 0
}

function fw_rule_exists
{
   local _rule="$1" 
   test -d "$(fw_rule_path "$_rule")"
   return $?
}

function fw_rule_interface_apply
{
   local _interface="$1"
   local _rule="$2"
   local _args="${@:3}"
   ! if_interface_exists "$_interface" && return 1

   local _firewall_file="$(stdlib_filesearch  "$(fw_rule_path)" "$(stdlib_pathify "$_rule")" 'rule')"
   [ -z "$_firewall_file" ] && return 2
   [ ! -x "$_firewall_file" ] && return 3
   ! "$_firewall_file" "$_interface" $_args && return 4
   return 0
}

function fw_rule_dev_apply
{
   local _device="$1"
   local _rule="$2"
   local _args="${@:3}"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   [ -z "$_interface" ] && return 2
   ! if_interface_exists "$_interface" && return 3
   ! fw_rule_interface_apply "$_interface" "$_rule" $_args && return 4
   return 0
}

function fw_raw
{
   local _protocol="$(stdlib_toupper $1)"
   local _args="${@:2}"

   if [ "$_protocol" != "4" -a "$_protocol" != "6" -a "$_protocol" != "D" ]; then
      return 1
   fi

   if [ "$_protocol" == "4" -o "$_protocol" == "D" ]; then
      ! iptables $_args && return 2 
   fi

   if [ "$_protocol" == "6" -o "$_protocol" == "D" ]; then
      ! ip6tables $_args && return 3
   fi

   return 0
}

function fw_append
{ 
   local _protocol="$(stdlib_toupper $1)"
   local _chain="$(stdlib_toupper $2)"
   local _args="${@:3}"

   ! fw_raw "$_protocol" -A "$_chain" $_args && return 1
   return 0
}

function fw_append_d
{
   ! fw_append D $@ && return 1
   return 0
}

function fw_append_4
{
   ! fw_append 4 $@ && return 1
   return 0
}

function fw_append_6
{
   ! fw_append 6 $@ && return 1
   return 0
}

function fw_check
{ 
   local _protocol="$(stdlib_toupper $1)"
   local _chain="$(stdlib_toupper $2)"
   local _args="${@:3}"

   fw_raw "$_protocol" -C "$_chain" $_args
   return $?
}

function fw_check_d
{
   fw_check D $@
   return $?
}

function fw_check_4
{
   fw_check 4 $@
   return $?
}

function fw_check_6
{
   fw_check 6
   return $?
}

function fw_delete
{ 
   local _protocol="$(stdlib_toupper $1)"
   local _chain="$(stdlib_toupper $2)"
   local _args="${@:3}"

   ! fw_raw "$_protocol" -D "$_chain" $_args && return 1
   return 0
}

function fw_delete_d
{
   ! fw_delete D $@ && return 1
   return 0
}

function fw_delete_4
{
   ! fw_delete 4 $@ && return 1
   return 0
}

function fw_delete_6
{
   ! fw_delete 6 $@ && return 1
   return 0
}

function fw_list
{ 
   local _protocol="$(stdlib_toupper $1)"
   local _chain="$(stdlib_toupper $2)"
   local _args="${@:3}"

   ! fw_raw "$_protocol" -S "$_chain" $_args && return 1
   return 0
}

function fw_list_d
{
   ! fw_list D $@ && return 1
   return 0
}

function fw_list_4
{
   ! fw_list 4 $@ && return 1
   return 0
}

function fw_list_6
{
   ! fw_list 6 $@ && return 1
   return 0
}

function fw_clear_interface
{
   local _protocol="$(stdlib_toupper $1)"
   local _chain="$(stdlib_toupper $2)"
   local _interface="$3"
   ! if_interface_exists "$_interface" && return 1

   local _args="${@:4}"
   local _grep_query="$_interface"
   local _interface_network="$(if_interface_ipv4_network "$_interface")"

   if [ -n "$_interface_network" ]; then
      _grep_query="($_interface|$_interface_network)"
   fi

   # fuck the IFS variable
   local _tmpfile="$(stdlib_tmpfile)"
   fw_list "$_protocol" "$_chain" $_args | egrep -- "-[a-z]+ $_grep_query[[:space:]]+" > $_tmpfile
   local _lines="$(wc -l "$_tmpfile" | awk '{ print $1 }')"

   for _rule in $(seq 1 $_lines); do
      local _clean_rule="$(head -n"$_rule" "$_tmpfile" | tail -n1 | cut -d ' ' -f 3-)"
      fw_delete "$_protocol" "$_chain" "$_clean_rule" $_args
   done

   shred -u "$_tmpfile" &>/dev/null
   return 0
}

function fw_clear_interface_d
{
   ! fw_clear_interface D $@ && return 1
   return 0
}

function fw_clear_interface_4
{
   ! fw_clear_interface 4 $@ && return 1
   return 0
}

function fw_clear_interface_6
{
   ! fw_clear_interface 6 $@ && return 1
   return 0
}

function fw_clear_device
{
   local _protocol="$(stdlib_toupper $1)"
   local _chain="$(stdlib_toupper $2)"
   local _dev="$3"
   ! if_dev_exists "$_dev" && return 1

   local _args="${@:4}"
   local _interface="$(if_dev_interface "$_dev")"
   [ -z "$_interface" ] && return 2
   ! if_interface_exists "$_interface" && return 3
   ! fw_clear_interface "$_protocol" "$_chain" "$_interface" $_args && return 4

   return 0
}

function fw_clear_device_d
{
   ! fw_clear_device D $@ && return 1
   return 0
}

function fw_clear_device_4
{
   ! fw_clear_device 4 $@ && return 1
   return 0
}

function fw_clear_device_6
{
   ! fw_clear_device 6 $@ && return 1
   return 0
}

ORK_FW_RULES="rules"
ork_reconfigure "fw"
