#!/bin/bash

source orkhideya
ork_include if
ork_include stdlib

function fw_root
{
   ork_configpath "fw"
   return 0
}

function fw_rule_path
{
   local _rule="$1"
   ork_pathcat "$(fw_root)" "$ORK_FW_RULES"
   return 0
}

function fw_rule_exists
{
   local _rule="$1" 
   test -d "$(fw_rule_path "$_rule")"
   return $?
}

function fw_rule_apply
{
   local _device="$1"
   local _rule="$2"
   local _args="${@:3}" 
   ! if_dev_exists "$_device" && return 1

   local _firewall_file="$(stdlib_filesearch  "$(fw_rule_path)" "$(stdlib_pathify "$_rule")" 'rule')"
   [ -z "$_firewall_file" ] && return 2
   [ ! -x "$_firewall_file" ] && return 3
   ! "$_firewall_file" "$_device" $_args && return 4
   return 0
}

function fw_raw
{
   local _protocol="$(stdlib_toupper $1)"
   local _args="${@:2}"

   if [ "$_protocol" != "4" -a "$_protocol" != "6" -a "$_protocol" != "D" ]; then
      return 1
   fi

   if [ "$_protocol" == "4" -o "$_protocol" == "D" ]; then
      ! iptables $_args && return 2
   fi

   if [ "$_protocol" == "6" -o "$_protocol" == "D" ]; then
      ! ip6tables $_args && return 3
   fi

   return 0
}

function fw_append
{ 
   local _protocol="$1"
   local _chain="$(strlib_toupper $2)"
   local _args="${@:3}"

   ! fw_raw "$_protocol" -A "$_chain" $_args && return 1
   return 0
}

ORK_FW_RULES="rules"
ork_reconfigure "fw"
