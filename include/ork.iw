#!/bin/bash

source orkhideya
ork_include if
ork_include stdlib
ork_include stdout

function iw_root
{
   ork_configpath "iw"
   return 0
}

function iw_ap_root
{
   ork_pathcat "$(iw_root)" "$ORK_IW_AP_PATH"
   return 0
}

function iw_ap_path
{
   local _ap="$1"
   ork_pathcat "$(iw_ap_root)" "$(stdlib_pathify "$_ap")"
   return 0
}

function iw_ap_exists
{
   local _ap="$1"
   test -d "$(iw_ap_path "$_ap")"
   return $?
}

function iw_ap_essid
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _essid_file="$(stdlib_filesearch "$(iw_ap_root)" "$(stdlib_pathify "$_ap")" "essid")"
   [ -z "$_essid_file" ] && return 2
   [ ! -r "$_essid_file" ] && return 3

   cat "$_essid_file"
   return 0
}

function iw_ap_bssid
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _bssid_file="$(stdlib_filesearch "$(iw_ap_root)" "$(stdlib_pathify "$_ap")" "bssid")"
   [ -z "$_bssid_file" ] && return 2
   [ ! -r "$_bssid_file" ] && return 3

   cat "$_bssid_file"
   return 0
}

function iw_ap_preup
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _device="$2"
   ! if_dev_exists "$_device" && return 2

   local _preup_file="$(stdlib_filesearch "$(iw_ap_root)" "$(stdlib_pathify "$_ap")" "pre-up")"
   [ ! -e "$_preup_file" ] && return 0 # if it doesn't exist, that's okay
   [ ! -x "$_preup_file" ] && return 3 # if it's not exeutable, that ain't cool man!

   ! "$_preup_file" "$_device" && return 4
   return 0
}

function iw_ap_postup
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _device="$2"
   ! if_dev_exists "$_device" && return 2

   local _postup_file="$(stdlib_filesearch "$(iw_ap_root)" "$(stdlib_pathify "$_ap")" "post-up")"
   [ ! -e "$_postup_file" ] && return 0 # if it doesn't exist, that's okay
   [ ! -x "$_postup_file" ] && return 3 # if it's not exeutable, that ain't cool man!

   ! "$_postup_file" "$_device" && return 4
   return 0
}

function iw_ap_predown
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _device="$2"
   ! if_dev_exists "$_device" && return 2

   local _predown_file="$(stdlib_filesearch "$(iw_ap_root)" "$(stdlib_pathify "$_ap")" "pre-down")"
   [ ! -e "$_predown_file" ] && return 0 # if it doesn't exist, that's okay
   [ ! -x "$_predown_file" ] && return 3 # if it's not exeutable, that ain't cool man!

   ! "$_predown_file" "$_device" && return 4
   return 0
}

function iw_ap_postdown
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _device="$2"
   ! if_dev_exists "$_device" && return 2

   local _postdown_file="$(stdlib_filesearch "$(iw_ap_root)" "$(stdlib_pathify "$_ap")" "post-down")"
   [ ! -e "$_postdown_file" ] && return 0 # if it doesn't exist, that's okay
   [ ! -x "$_postdown_file" ] && return 3 # if it's not exeutable, that ain't cool man!

   ! "$_postdown_file" "$_device" && return 4
   return 0
}

function iw_ap_connect
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _device="$2"
   ! if_dev_exists "$_device" && return 2
   ! iw_dev_set_mode "$_device" managed && return 3

   local _bssid="$(iw_ap_bssid "$_ap")"
   [ -z "$_bssid" ] && return 4

   local _essid="$(iw_ap_essid "$_ap")"
   [ -z "$_essid" ] && return 5
   ! iw_dev_set_essid "$_device" "$_essid" && return 6
   ! iw_dev_set_bssid "$_device" "$_bssid" && return 7
   ! iw_ap_preup "$_ap" "$_device" && return 8
   ! if_dev_up "$_device" && return 9
   ! iw_ap_postup "$_ap" "$_device" && return 10
   ! if_dev_link_wait "$_device" && return 11

   return 0
}

function iw_ap_disconnect
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _device="$2"
   ! if_dev_exists "$_device" && return 2

   ! iw_ap_predown "$_ap" "$_device" && return 3
   ! if_dev_down "$_device" && return 4
   ! iw_ap_postdown "$_ap" "$_device" && return 5

   return 0
}

function iw_dev_set_mode
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   [ -z "$_interface" ] && return 2
   ! if_interface_exists "$_interface" && return 3

   local _mode="$2"
   ! iwconfig "$_interface" mode "$_mode" && return 4

   return 0
}

function iw_dev_set_channel
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   [ -z "$_interface" ] && return 2
   ! if_interface_exists "$_interface" && return 3

   local _channel="$2"
   ! iwconfig "$_interface" channel "$_channel" && return 4

   return 0
}

function iw_dev_set_essid
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   [ -z "$_interface" ] && return 2
   ! if_interface_exists "$_interface" && return 3

   local _essid="$2"
   ! iwconfig "$_interface" essid "$_essid" && return 4

   return 0
}

function iw_dev_set_bssid
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   [ -z "$_interface" ] && return 2
   ! if_interface_exists "$_interface" && return 3

   local _bssid="$2"
   ! iwconfig "$_interface" ap "$_bssid" && return 4

   return 0
}

ORK_IW_SCAN_RETRY="5"
ORK_IW_AP_PATH="ap"

ork_reconfigure "iw"
