#!/bin/bash

source orkhideya
ork_include if
ork_include stdlib
ork_include stdout

function iw_root
{
   ork_configpath "iw"
   return 0
}

function iw_ap_root
{
   ork_pathcat "$(iw_root)" "$ORK_IW_AP_PATH"
   return 0
}

function iw_ap_path
{
   local _ap="$1"
   ork_pathcat "$(iw_ap_root)" "$(stdlib_pathify "$_ap")"
   return 0
}

function iw_ap_exists
{
   local _ap="$1"
   test -d "$(iw_ap_path "$_ap")"
   return $?
}

function iw_class_root
{
   ork_pathcat "$(iw_root)" "$ORK_IW_CLASS_PATH"
   return 0
}

function iw_class_path
{
   local _class="$1"
   ork_pathcat "$(iw_class_root)" "$(stdlib_pathify "$_class")"
   return 0
}

function iw_class_exists
{
   local _class="$1"
   test -d "$(iw_class_path "$_class")"
   return $?
}

function iw_ap_essid
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _essid_file="$(stdlib_filesearch "$(iw_ap_root)" "$(stdlib_pathify "$_ap")" "essid")"
   [ -z "$_essid_file" ] && return 2
   [ ! -r "$_essid_file" ] && return 3

   cat "$_essid_file"
   return 0
}

function iw_ap_bssid
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _bssid_file="$(stdlib_filesearch "$(iw_ap_root)" "$(stdlib_pathify "$_ap")" "bssid")"
   [ -z "$_bssid_file" ] && return 2
   [ ! -r "$_bssid_file" ] && return 3

   cat "$_bssid_file"
   return 0
}

function iw_ap_class
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _class_file="$(stdlib_filesearch "$(iw_ap_root)" "$(stdlib_pathify "$_ap")" "class")"
   [ -z "$_class_file" ] && return 2
   [ ! -r "$_class_file" ] && return 3

   cat "$_class_file"
   return 0
}

function iw_ap_key
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _key_file="$(stdlib_filesearch "$(iw_ap_root)" "$(stdlib_pathify "$_ap")" "key")"
   [ -z "$_key_file" ] && return 2
   [ ! -r "$_key_file" ] && return 3

   cat "$_key_file"
   return 0
}

function iw_ap_config
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _config_file="$(stdlib_filesearch "$(iw_ap_root)" "$(stdlib_pathify "$_ap")" "config")"
   [ -z "$_config_file" ] && return 2
   [ ! -r "$_config_file" ] && return 3

   cat "$_config_file"
   return 0
}

function iw_ap_preup
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _device="$2"
   ! if_dev_exists "$_device" && return 2

   local _class="$(iw_ap_class "$_ap")"
   [ -z "$_class" ] && return 3
   ! iw_class_exists "$_class" && return 4

   local _preup_file="$(stdlib_filesearch "$(iw_class_root)" "$(stdlib_pathify "$_class")" "pre-up")"
   [ ! -e "$_preup_file" ] && return 0 # if it doesn't exist, that's okay
   [ ! -x "$_preup_file" ] && return 5 # if it's not exeutable, that ain't cool man!

   ! "$_preup_file" "$_ap" "$_device" && return 6
   return 0
}

function iw_ap_postup
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _device="$2"
   ! if_dev_exists "$_device" && return 2

   local _class="$(iw_ap_class "$_ap")"
   [ -z "$_class" ] && return 3
   ! iw_class_exists "$_class" && return 4

   local _postup_file="$(stdlib_filesearch "$(iw_class_root)" "$(stdlib_pathify "$_class")" "post-up")"
   [ ! -e "$_postup_file" ] && return 0 # if it doesn't exist, that's okay
   [ ! -x "$_postup_file" ] && return 5 # if it's not exeutable, that ain't cool man!

   ! "$_postup_file" "$_ap" "$_device" && return 6
   return 0
}

function iw_ap_predown
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _device="$2"
   ! if_dev_exists "$_device" && return 2

   local _class="$(iw_ap_class "$_ap")"
   [ -z "$_class" ] && return 3
   ! iw_class_exists "$_class" && return 4

   local _predown_file="$(stdlib_filesearch "$(iw_class_root)" "$(stdlib_pathify "$_class")" "pre-down")"
   [ ! -e "$_predown_file" ] && return 0 # if it doesn't exist, that's okay
   [ ! -x "$_predown_file" ] && return 5 # if it's not exeutable, that ain't cool man!

   ! "$_predown_file" "$_ap" "$_device" && return 6
   return 0
}

function iw_ap_postdown
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _device="$2"
   ! if_dev_exists "$_device" && return 2

   local _class="$(iw_ap_class "$_ap")"
   [ -z "$_class" ] && return 3
   ! iw_class_exists "$_class" && return 4

   local _postdown_file="$(stdlib_filesearch "$(iw_class_root)" "$(stdlib_pathify "$_class")" "post-down")"
   [ ! -e "$_postdown_file" ] && return 0 # if it doesn't exist, that's okay
   [ ! -x "$_postdown_file" ] && return 5 # if it's not exeutable, that ain't cool man!

   ! "$_postdown_file" "$_ap" "$_device" && return 6
   return 0
}

function iw_ap_connect
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _device="$2"
   ! if_dev_exists "$_device" && return 2
   ! iw_dev_set_mode "$_device" managed && return 3

   local _bssid="$(iw_ap_bssid "$_ap")"
   [ -z "$_bssid" ] && return 4

   local _essid="$(iw_ap_essid "$_ap")"
   [ -z "$_essid" ] && return 5
   ! iw_dev_set_essid "$_device" "$_essid" && return 6
   ! iw_dev_set_bssid "$_device" "$_bssid" && return 7
   ! iw_ap_preup "$_ap" "$_device" && return 8
   ! if_dev_up "$_device" && return 9
   ! iw_ap_postup "$_ap" "$_device" && return 10
   ! if_dev_link_wait "$_device" && return 11

   return 0
}

function iw_ap_disconnect
{
   local _ap="$1"
   ! iw_ap_exists "$_ap" && return 1

   local _device="$2"
   ! if_dev_exists "$_device" && return 2

   ! iw_ap_predown "$_ap" "$_device" && return 3
   ! if_dev_down "$_device" && return 4
   ! iw_ap_postdown "$_ap" "$_device" && return 5

   return 0
}

function iw_ap_list
{
   _category="$1"
   [ -n "$_category" ] && ! iw_ap_exists "$_category" && exit 1;

   find "$(ork_pathcat "$(iw_ap_root)" "$(stdlib_pathify "$_category")")" -name "bssid" -exec cat {} \;
   return $?
}

function iw_dev_get_mode
{
   local _dev="$1"
   ! if_dev_exists "$_dev" && return 1

   local _interface="$(if_dev_interface "$_dev")"
   [ -z "$_interface" ] && return 2
   ! if_interface_exists "$_interface" && return 3

   stdlib_tolower "$(iwconfig "$_interface" 2>/dev/null | egrep -i -o 'mode:([a-z]+)' | awk -F ':' '{ print $2 }')"
   return 0
}

function iw_dev_set_mode
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   [ -z "$_interface" ] && return 2
   ! if_interface_exists "$_interface" && return 3

   local _mode="$2"
   ! iwconfig "$_interface" mode "$_mode" && return 4

   return 0
}

function iw_scan_attr
{
   local _scan="$1"
   local _attr="$2"

   echo "$_scan" | egrep -o "\\|$_attr#([^|]+)" | cut -d '#' -f 2-
   return $?
}

function iw_scan_signal
{
   local _scan="$1"

   echo "$_scan" | grep -o -P '\|Quality=\d+/\d+' | awk -F '=' '{ print $2 }'
   return 0
}

function iw_scan_encryption
{
   local _scan_entry="$1"
   local _encryption="none"

   if [ -n "$(echo $_scan_entry | grep 'WPA2 Version 1')" ]; then
      _encryption="wpa2"
   elif [ -n "$(echo $_scan_entry | grep 'WPA Version 1')" ]; then
      _encryption="wpa"
   elif [ -n "$(echo $_scan_entry | grep 'Encryption key#on')" ]; then
      _encryption="wep"
   fi

   echo "$_encryption"
   return 0
}

function iw_dev_scan
{
   local _dev="$1"
   ! if_dev_exists "$_dev" && return 1
   ! if_dev_up "$_dev" && return 2
   [ "$(iw_dev_get_mode "$_dev")" != "managed" ] && return 3 # iwlist needs managed

   local _interface="$(if_dev_interface "$_dev")"
   [ -z "$_interface" ] && return 4
   ! if_interface_exists "$_interface" && return 5

   # and now, an ugly-ass sed script
   iwlist "$_interface" scan | tail -n+2 | \
      sed -r -e 's/(\s)+/\1/g' -e 's/^\s//g' -e 's/:\s+/:/g' -e 's/;\s+/;/g' -e 's/:/#/' | \
      tr '\n' '|' | sed -r -e 's/Cell [0-9]+ - /\nAP|/g' | tail -n+2

   [ "$?" != "0" ] && return 6
   return 0
}

function iw_dev_scan_simple
{ 
   local _dev="$1"
   ! if_dev_exists "$_dev" && return 1
   ! if_dev_up "$_dev" && return 2
   [ "$(iw_dev_get_mode "$_dev")" != "managed" ] && return 3 # iwlist needs managed

   _ifs="$IFS"
   IFS="
"

   for _scan_entry in $(iw_dev_scan "$_dev"); do
      [ "$?" != "0" ] && return 4

      local _bssid="$(iw_scan_attr "$_scan_entry" "Address")"
      local _essid="$(iw_scan_attr "$_scan_entry" "ESSID")"
      #local _quality="$(echo $_scan_entry | grep -i -P -o 'quality=\d+/\d+' | awk -F '=' '{ print $2 }')"

      local _encryption="none"

      if [ -n "$(echo $_scan_entry | grep 'WPA2 Version 1')" ]; then
         _encryption="WPA2"
      elif [ -n "$(echo $_scan_entry | grep 'WPA Version 1')" ]; then
         _encryption="WPA"
      elif [ -n "$(echo $_scan_entry | grep 'Encryption key#on')" ]; then
         _encryption="WEP"
      fi

      echo "AP|BSSID#$_bssid|ESSID#$_essid|Encryption#$_encryption"
   done

   IFS="$_ifs"

   return 0
}

function iw_dev_set_channel
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   [ -z "$_interface" ] && return 2
   ! if_interface_exists "$_interface" && return 3

   local _channel="$2"
   ! iwconfig "$_interface" channel "$_channel" && return 4

   return 0
}

function iw_dev_set_essid
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   [ -z "$_interface" ] && return 2
   ! if_interface_exists "$_interface" && return 3

   local _essid="$2"
   ! iwconfig "$_interface" essid "$_essid" && return 4

   return 0
}

function iw_dev_set_bssid
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   [ -z "$_interface" ] && return 2
   ! if_interface_exists "$_interface" && return 3

   local _bssid="$2"
   ! iwconfig "$_interface" ap "$_bssid" && return 4

   return 0
}

function iw_dev_set_key
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   [ -z "$_interface" ] && return 2
   ! if_interface_exists "$_interface" && return 3

   local _key="$2"
   ! iwconfig "$_interface" key "$_key" && return 4

   return 0
}

ORK_IW_AP_PATH="ap"
ORK_IW_CLASS_PATH="class"

ork_reconfigure "iw"
