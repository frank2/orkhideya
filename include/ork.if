#!/bin/bash

source orkhideya
ork_include stdlib

function if_root
{
   ork_configpath "net"
   return 0
}

function if_class_root
{
   ork_pathcat "$(if_root)" "$ORK_IF_CLASS_PATH"
   return 0
}

function if_dev_root
{
   ork_pathcat "$(if_root)" "$ORK_IF_CLASS_PATH"
   return 0
}

function if_class_exists
{
}

function if_class_new
{
}

function if_if_exists
{
   local _interface="$1"
   test -n "$(ifconfig -a | grep "^${_interface}:")"
   return $?
}

function if_ipv4mask
{
   local _size="$1"
   if [ "$_size" -lt 0 -o "$_size" -gt 32 ]; then return 1; fi

   local _inversion="$((32 - $_size))"

   echo "$(( (2 ** $_size - 1) << $_inversion ))"
   return 0
}

function if_if_isup
{
   local _interface="$1"

   if ! if_if_exists "$_interface"; then return 1; fi

   ifconfig -s | tail -n+2 | grep -q "^${_interface}"
   return $?
}

function if_isipv4
{
   local _address="$1"

   echo $_address | grep -q -P '((\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])'
   return $?
}

function if_iscidr
{
   local _address="$1"
   if ! ( echo "$_address" | grep -q '/' ) || [ "$(stdlib_strcount '/' "$_address")" -gt 1 ]; then return 1; fi

   local _network="$(echo "$_address" | awk -F '/' '{ print $2 }')"
   if ! ( echo $_network | grep -q '^[0-9]+$' ); then return 2; fi

   if_isipv4 "$_address" && [ "$_network" -ge "0" -a "$_network" -le "32" ];
   return $?
}

function if_ipv4toint
{
   local _address="$1"
   local _number="0"

   if ! if_isipv4 "$_address"; then return 1; fi

   for _chunk in $(seq 1 4); do
      local _octet="$(echo "$_address" | awk -F '.' "{ print \$$_chunk }")"
      _number="$(($_number | ($_octet << 32 - (8 * $_chunk))))"
   done

   echo $_number
   return 0
}

function if_inttoipv4
{
   local _number="$(stdlib_tolower "$1")"

   if echo $_number | grep -q '^[0-9a-f]$'; then
      _number="$(($_number))"
   elif echo $_number | grep -q '[^0-9]'; then
      return 1
   fi

   if [ "$_number" -lt "0" -o "$_number" -gt "$(if_ipv4mask 32)" ]; then return 2; fi

   local _address=""

   for _chunk in $(seq 1 4); do
      if [ -n "$_address" ]; then
         _address="${_address}."
      fi

      _address="${_address}$(( ($_number >> (32 - ($_chunk * 8))) & 0xFF ))"
   done

   echo "$_address"
   return 0
}

function if_if_exists
{
   local _interface="$1"
   test -n "$(ifconfig -a | grep "^${_interface}:")"
   return $?
}

function if_if_isup
{
   local _interface="$1"
   ifconfig -s | tail -n+2 | grep -q "^${_interface}"
   return $?
}

function if_if_isdown
{
   local _interface="$1"
   ! if_if_isup "$_interface"
   return $?
}

function if_if_downup
{
   local _interface="$1"
   local _downup="$2"

   if [ "$_downup" != "down" -a "$_downup" != "up" ]; then
      return 1
   fi

   ifconfig "$_interface" $_downup
   return $?
}

function if_if_down
{
   local _interface="$1"
   if_if_downup "$_interface" down
   return $?
}

function if_if_up
{
   local _interface="$1"
   if_if_downup "$_interface" up
   return $?
}

function if_if_haslink
{
   local _interface="$1"
   local _carrier="/sys/class/net/$_interface/carrier"

   if ! ( if_if_exists "$_interface" ); then return 1; fi
   test -r "$_carrier" -a "$(cat "$_carrier" 2>/dev/null)" == "1"
   return $?
}

function if_if_address_canacquire
{
   local _family="$1"

   case "$_family" in
      unix|inet|inet6|ax25|netrom|rose|ipx|ddp|ec|ash|x25|netmask|broadcast)
         return 0
         ;;
      *)
         return 1
         ;;
   esac
}

function if_if_address_get
{
   local _interface="$1"
   local _family="$2"

   if ! if_if_address_canacquire "$_family"; then return 1; fi
   if ! if_if_exists "$_interface"; then return 2; fi

   ifconfig "$_interface" | grep -o -P "$_family\s+.*" | awk '{ print $2 }'
   if [ "$?" != "0" ]; then return 3; fi
   return 0
}

function if_if_address_set
{
   local _interface="$1"
   local _family="$2"
   local _address="$3"

   if ! if_if_address_canacquire "$_family"; then return 1; fi
   if ! if_if_exists "$_interface"; then return 2; fi

   ifconfig "$_interface" "$_family" "$_address"
   if [ "$?" != "0" ]; then return 3; fi
   return 0
}

function if_if_link_wait
{
   local _device="$1"

   if ! if_if_exists "$_device"; then return 1; fi
   if ! if_if_isup "$_device"; then return 2; fi

   local _timeout="0"

   while [ "$_timeout" -lt "$ORK_IF_LINK_TIMEOUT" ]; do
      if if_if_haslink "$_device"; then break; fi
      sleep 1
      _timeout="$(($_timeout+1))"
   done

   if [ "$_timeout" == "$ORK_IF_LINK_TIMEOUT" ]; then
      return 3
   fi

   return 0
}

function if_dev_root
{
   ork_pathcat "$(if_root)" "$ORK_IF_DEVICE_PATH"
   return 0
}

function if_dev_skeletons
{
   ork_pathcat "$(if_root)" "$ORK_IF_DEVICE_SKELETONS"
   return 0
}

function if_dev_path
{
   local _device="$1"
   ork_pathcat "$(if_dev_root)" "$(stdlib_pathify "$_device")"
   return 0
}

function if_dev_skeletons_path
{
   local _device="$1"
   ork_pathcat "$(if_dev_skeletons)" "$(stdlib_pathify "$_device")"
   return 0
}

function if_dev_exists
{
   local _device="$1"

   test -d "$(if_dev_path "$_device")"
   return $?
}

function if_dev_create
{
   local _device="$1"
   if if_dev_exists "$_device"; then return 1; fi

   local _dev_path="$(if_dev_path "$_device")"
   if ! mkdir -p "$_dev_path"; then return 2; fi

   if [ -d "$(if_dev_skeletons_path "$_device")" ]; then
      if ! cp "$(if_dev_skeletons_path "$_device")/*" "$_dev_path/"; then return 3; fi
   else
      local _initial_files="{ifup,ifdown,config}"
      if ! touch "$_dev_path/$_initial_files"; then return 4; fi
      if ! chmod +x "$_dev_path/$_initial_files"; then return 5; fi
   fi

   return 0
}

function if_dev_destroy
{
   local _device="$1"
   if ! if_dev_exists "$_device"; then return 1; fi

   local _dev_path="$(if_dev_path "$_device")"
   if ! rm -rf "$_dev_path"; then return 2; fi
   return 0
}

function if_dev_downup
{
   local _device="$1"
   local _downup="$2"
   if [ "$_downup" != "up" -a "$_downup" != "down" ]; then return 1; fi

   local _downup_args="${@:3}"
   if ! if_dev_exists "$_device"; then return 2; fi

   local _dev_path="$(if_dev_path "$_device")"
   if [ -e "$_dev_path/config" ]; then
      source "$_dev_path/config"
      if [ "$?" != "0" ]; then return 3; fi
   fi

   if [ ! -x "$_dev_path/ifup" ]; then return 4; fi

   "$_dev_path/if$_downup" "$_downup_args"
   if [ "$?" != "0" ]; then return 5; fi

   return 0
}

function if_dev_down
{
   local _device="$1"
   local _downargs="${@:2}"

   if_dev_downup "$_device" down "$_downargs"
   return $?
}

function if_dev_up
{
   local _device="$1"
   local _upargs="${@:2}"

   if_dev_downup "$_device" up "$_upargs"
   return $?
}

ORK_IF_LINK_TIMEOUT="30"
ORK_IF_DEV_PATH="dev"
ORK_IF_CLASS_PATH="class"

ork_reconfigure "if"
