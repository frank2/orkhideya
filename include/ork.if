#!/bin/bash

source orkhideya
ork_include stdlib
ork_include ipv4

function if_depends
{
   ork_path_check ifconfig route grep egrep awk head shred cat
   return $?
}

function if_root
{
   ork_configpath "if"
   return 0
}

function if_class_root
{
   ork_pathcat "$(if_root)" "$ORK_IF_CLASS_PATH"
   return 0
}

function if_dev_root
{
   ork_pathcat "$(if_root)" "$ORK_IF_DEV_PATH"
   return 0
}

function if_class_path
{
   local _class="$1"
   ork_pathcat "$(if_class_root)" "$(stdlib_pathify "$_class")"
   return 0
}

function if_dev_path
{
   local _dev="$1"
   ork_pathcat "$(if_dev_root)" "$(stdlib_pathify "$_dev")"
   return 0
}

function if_class_exists
{
   local _class="$1"
   test -d "$(if_class_path "$_class")"
   return $?
}

function if_dev_exists
{
   local _dev="$1"
   test -n "$_dev" -a -d "$(if_dev_path "$_dev")"
   return $?
}

function if_gateway_interface
{
   local _parent_interface="$1"

   if [ -n "$_parent_interface" ]; then
      ! if_interface_exists "$_parent_interface" && return 1

      local _network="$(if_interface_ipv4_network "$_parent_interface")"
      [ -z "$_network" ] && return 2 

      local _destination="$(ipv4_cidr_network "$_network")"
      local _genmask="$(ipv4_cidr_netmask "$_network")"
   else
      local _destination="0.0.0.0"
      local _genmask="0.0.0.0"
   fi

   _gateway="$(route -n | egrep "^$_destination[[:space:]]+[[:digit:].]+[[:space:]]+$_genmask[[:space:]]+[[:upper:]]*G[[:upper:]]*" | awk '{ print $8 }' | head -n1)"
   [ -z "$_gateway" ] && return 3

   echo "$_gateway"
   return 0
}

function if_gateways
{
   route -n | awk '{ print $4,$8 }' | grep '^[[:upper:]]*G[[:upper:]]*' | awk '{ print $2 }' | sort -u
   return $?
}

function if_gateway_networks
{
   for _gateway in $(if_gateways); do
      if_interface_ipv4_network "$_gateway"
   done

   return 0
}

function if_class_create
{
   local _class="$1"
   local _args="${@:2}"
   ! if_class_exists "$_class" && return 1

   local _class_create="$(stdlib_filesearch "$(if_class_root)" "$(stdlib_pathify "$_class")" "create")"
   [ ! -x "$_class_create" ] && return 2

   local _tmpfile="$(stdlib_tmpfile "$_class-interface")"

   "$_class_create" $_args 1>"$_tmpfile"
   _status="$?"
   _new_interface="$(cat "$_tmpfile")"
   shred -u "$_tmpfile" &>/dev/null

   if [ "$_status" != "0" ]; then return 3; fi

   echo "$_new_interface"
   return 0
}

function if_class_destroy
{
   local _class="$1"
   local _interface="$2"
   local _args="${@:3}"
   ! if_class_exists "$_class" && return 1

   local _class_destroy="$(stdlib_filesearch "$(if_class_root)" "$(stdlib_pathify "$_class")" "destroy")"
   [ ! -x "$_class_destroy" ] && return 2

   "$_class_destroy" "$_interface" $_args
   [ "$?" != "0" ] && return 3

   return 0
}

function if_dev_class
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _device_class="$(stdlib_filesearch "$(if_dev_root)" "$(stdlib_pathify "$_device")" "class")"
   ! test -n "$_device_class" -a -r "$_device_class" && return 2

   cat "$_device_class"
   return 0
}

function if_dev_interface
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _device_interface="$(stdlib_filesearch "$(if_dev_root)" "$(stdlib_pathify "$_device")" "interface")"
   ! test -n "$_device_interface" -a -r "$_device_interface" && return 2

   cat "$_device_interface"
   return 0
}

function if_interface_unique_name
{
   local _root="$1"
   local _suffix="0"
   local _new_name="${_root}${_suffix}"

   while if_interface_exists "$_new_name"; do
      _suffix="$(($_suffix+1))"
      _new_name="${_root}${_suffix}"
   done

   echo $_new_name
   return 0
}

function if_interface_exists
{
   local _interface="$1"
   test -L "/sys/class/net/$_interface"
   return $?
}

function if_interface_is_up
{
   local _interface="$1"

   ! if_interface_exists "$_interface" && return 1
   [ -z "$(ifconfig | grep "^$_interface:")" ] && return 2
   return 0
}

function if_interface_is_down
{
   local _interface="$1"
   ! if_interface_is_up "$_interface"
   return $?
}

function if_interface_down
{
   local _interface="$1"
   ifconfig "$_interface" down
   return $?
}

function if_interface_up
{
   local _interface="$1"
   ifconfig "$_interface" up
   return $?
}

function if_interface_has_link
{
   local _interface="$1"
   ! if_interface_exists "$_interface" && return 1

   local _carrier="/sys/class/net/$_interface/carrier"
   test -r "$_carrier" -a "$(cat "$_carrier" 2>/dev/null)" == "1"
   return $?
}

function if_interface_address_canacquire
{
   local _family="$1"

   case "$_family" in
      unix|inet|inet6|ax25|netrom|rose|ipx|ddp|ec|ash|x25|netmask|broadcast)
         return 0
         ;;
      *)
         return 1
         ;;
   esac
}

function if_interface_address_get
{
   local _interface="$1"
   local _family="$2"

   if ! if_interface_address_canacquire "$_family"; then return 1; fi
   if ! if_interface_exists "$_interface"; then return 2; fi

   ifconfig "$_interface" | grep -o -P "$_family\s+.*" | awk '{ print $2 }'
   if [ "$?" != "0" ]; then return 3; fi
   return 0
}

function if_interface_address_set
{
   local _interface="$1"
   local _family="$2"
   local _address="$3"
   local _args=${@:4}

   if ! if_interface_address_canacquire "$_family"; then return 1; fi
   if ! if_interface_exists "$_interface"; then return 2; fi

   ifconfig "$_interface" "$_family" "$_address" $_args
   if [ "$?" != "0" ]; then return 3; fi
   return 0
}

function if_interface_ipv4_network
{
   local _interface="$1"
   ! if_interface_exists "$_interface" && return 1

   _ipv4_address="$(if_interface_address_get "$_interface" inet)"
   [ -z "$_ipv4_address" ] && return 2

   _netmask_address="$(if_interface_address_get "$_interface" netmask)"
   _cidr_mask="$(ipv4_netmask_to_cidr_mask "$_netmask_address")"

   _netmask_value="$(ipv4_to_int "$_netmask_address")"
   _ipv4_value="$(( $(ipv4_to_int "$_ipv4_address") & $_netmask_value ))"
   _ipv4_network="$(ipv4_from_int "$_ipv4_value")"

   echo "$_ipv4_network/$_cidr_mask"
   return 0
}

function if_interface_ether_get
{
   local _interface="$1"
   ! if_interface_exists "$_interface" && return 1

   cat "/sys/class/net/$_interface/address"
   return 0
}

function if_interface_ether_set
{
   local _interface="$1"
   local _address="$2"
   ! if_interface_exists "$_interface" && return 1
   ! ifconfig "$_interface" hw ether "$_address" && return 2

   return 0
}

function if_interface_link_wait
{
   local _interface="$1"

   ! if_interface_exists "$_interface" && return 1
   ! if_interface_is_up "$_interface" && return 2

   local _timeout="0"

   while [ "$_timeout" -lt "$ORK_IF_LINK_TIMEOUT" ]; do
      if_interface_has_link "$_interface" && break

      sleep 1
      _timeout="$(($_timeout+1))"
   done

   [ "$_timeout" == "$ORK_IF_LINK_TIMEOUT" ] && return 3
   return 0
}

function if_interface_list
{
   ifconfig -a -s | tail -n+2 | awk '{ print $1 }'
}

function if_interface_by_network
{
   local _network="$1"
   ! ipv4_cidr_valid "$_network" && return 1

   local _got_interface="0"

   for _interface in $(if_interface_list); do
      _interface_network="$(if_interface_ipv4_network "$_interface")"

      if ipv4_cidr_is_subnet "$_interface_network" "$_network"; then
         _got_interface="1"
         echo "$_interface"
      fi
   done

   [ "$_got_interface" == "0" ] && return 2
   return 0
}

function if_dev_is_up
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   [ -z "$_interface" ] && return 2
   ! if_interface_exists "$_interface" && return 3
   ! if_interface_is_up "$_interface" && return 4

   return 0
}

function if_dev_is_down
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   ! [ -z "$_interface" ] && return 2

   if_interface_is_down "$_interface"
   return $?
}

function if_dev_has_link
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1
   ! if_dev_is_up "$_device" && return 2

   local _interface="$(if_dev_interface "$_device")"
   [ -z "$_interface" ] && return 3
   ! if_interface_exists "$_interface" && return 4

   if_interface_has_link "$_interface"
   return $?
}

function if_dev_link_wait
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1
   ! if_dev_is_up "$_device" && return 2

   local _interface="$(if_dev_interface "$_device")"
   [ -z "$_interface" ] && return 3
   ! if_interface_exists "$_interface" && return 4
   ! if_interface_link_wait "$_interface" && return 5

   return 0
}

function if_dev_up
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1
   if_dev_is_up "$_device" && return 0

   local _interface="$(if_dev_interface "$_device")"
   ! if_interface_exists "$_interface" && return 2
   ! if_dev_preup "$_device" && return 3
   ! if_interface_up "$_interface" && return 4
   ! if_dev_postup "$_device" && return 5

   return 0
}

function if_dev_down
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1
   if_dev_is_down "$_device" && return 0

   local _interface="$(if_dev_interface "$_device")"
   ! if_interface_exists "$_interface" && return 2
   ! if_dev_predown "$_device" && return 3
   ! if_interface_down "$_interface" && return 4
   ! if_dev_postdown "$_device" && return 5

   return 0
}

function if_dev_preup
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _class="$(if_dev_class "$_device")"
   ! if_class_exists "$_class" && return 2

   local _preup_file="$(stdlib_filesearch "$(if_class_root)" "$(stdlib_pathify "$_class")" "pre-up")"
   [ -z "$_preup_file" -o ! -e "$_preup_file" ] && return 0 # if it doesn't exist, that's okay
   [ ! -x "$_preup_file" ] && return 3 # if it's not exeutable, that ain't cool man!

   ! "$_preup_file" "$_device" && return 4
   return 0
}

function if_dev_postup
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _class="$(if_dev_class "$_device")"
   ! if_class_exists "$_class" && return 2

   local _postup_file="$(stdlib_filesearch "$(if_class_root)" "$(stdlib_pathify "$_class")" "post-up")"
   [ -z "$_postup_file" -o ! -e "$_postup_file" ] && return 0 # if it doesn't exist, that's okay
   [ ! -x "$_postup_file" ] && return 3 # if it's not exeutable, that ain't cool man!

   ! "$_postup_file" "$_device" && return 4
   return 0
}

function if_dev_predown
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _class="$(if_dev_class "$_device")"
   ! if_class_exists "$_class" && return 2

   local _predown_file="$(stdlib_filesearch "$(if_class_root)" "$(stdlib_pathify "$_class")" "pre-down")"
   [ -z "$_predown_file" -o ! -e "$_predown_file" ] && return 0 # if it doesn't exist, that's okay
   [ ! -x "$_predown_file" ] && return 3 # if it's not exeutable, that ain't cool man!

   ! "$_predown_file" "$_device" && return 4
   return 0
}

function if_dev_postdown
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _class="$(if_dev_class "$_device")"
   ! if_class_exists "$_class" && return 2

   local _postdown_file="$(stdlib_filesearch "$(if_class_root)" "$(stdlib_pathify "$_class")" "post-down")"
   [ -z "$_postdown_file" -o ! -e "$_postdown_file" ] && return 0 # if it doesn't exist, that's okay
   [ ! -x "$_postdown_file" ] && return 3 # if it's not exeutable, that ain't cool man!

   ! "$_postdown_file" "$_device" && return 4
   return 0
}

function if_dev_ether_get
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   ! if_interface_exists "$_interface" && return 2
   ! if_interface_ether_get "$_interface" && return 3
   return 0
}

function if_dev_ether_set
{
   local _device="$1"
   ! if_dev_exists "$_device" && return 1

   local _interface="$(if_dev_interface "$_device")"
   ! if_interface_exists "$_interface" && return 2

   local _address="$2"
   ! if_interface_ether_set "$_interface" "$_address" && return 3
   return 0
}

ORK_IF_LINK_TIMEOUT="30"
ORK_IF_DEV_PATH="dev"
ORK_IF_CLASS_PATH="class"

ork_reconfigure "if"
