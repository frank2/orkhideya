#!/bin/bash

source orkhideya
ork_include stdout

function stdlib_trap
{
   "$@"
   local _status="$?"

   if [ "$_status" != "0" ]; then
      stdout_error "Execution failed (status: $_status)"
      stdout_error "Running clean-up chain."

      local _popped="$(stdlib_trap_cleanup_peek)"

      while [ -n "$_popped" ]; do
         stdout_error "... $(stdout_color_wrap main-focused "$_popped")"
         $_popped
         stdlib_trap_cleanup_pop
         _popped="$(stdlib_trap_cleanup_peek)"
      done

      stdout_error "Cleanup complete."
      exit 1
   fi

   return 0
}

function stdlib_trap_cleanup_push
{
   local _trap_function="$1"
   STDLIB_TRAP_FUNCTIONS="$_trap_function:$STDLIB_TRAP_FUNCTIONS"

   return 0
}

function stdlib_trap_cleanup_peek
{
   if [ -z "$STDLIB_TRAP_FUNCTIONS" ]; then return 1; fi

   local _function="$(echo $STDLIB_TRAP_FUNCTIONS | cut -d ':' -f 1)"
   STDLIB_TRAP_FUNCTIONS="$(echo "$STDLIB_TRAP_FUNCTIONS" | sed -e "s/^${_function}://")"

   echo $_function

   return 0
}

function stdlib_trap_cleanup_pop
{
   if [ -z "$STDLIB_TRAP_FUNCTIONS" ]; then return 1; fi

   local _function="$(stdlib_trap_cleanup_peek)"
   STDLIB_TRAP_FUNCTIONS="$(echo "$STDLIB_TRAP_FUNCTIONS" | sed -e "s/^${_function}://")"

   return 0
}

function stdlib_isroot
{
   test "$(id -u)" == 0
   return $?
}

function stdlib_tolower
{
   local _message="$@"
   echo $_message | tr '[:upper:]' '[:lower:]'
   return $?
}

function stdlib_toupper
{
   local _message="$@"
   echo $_message | tr '[:lower:]' '[:upper:]'
   return $?
}

function stdlib_pathify
{
   local _configuration="$@"
   echo "$_configuration" | sed -e 's,\.,/,g'
   return $?
}

function stdlib_configify
{
   local _path="$@"
   echo "$_path" | sed -e 's,/,.,g'
   return $?
}

function stdlib_fileify
{
   local _file="$@"
   echo "$_file" | sed -e 's/\./-/g'
   return $?
}

function stdlib_edit
{
   local _output_file="$1"

   if [ -z "$EDITOR" ]; then
      local EDITOR="$(which vim)"
   fi

   $EDITOR "$_output_file"
   return $?
}

function stdlib_strcount
{
   local _needle="$1"
   local _haystack="${@:2}"

   echo $_haystack | grep -o "$_needle" | wc -l
   return $?
}

function stdlib_cdup
{
   local _path="$@"
   if [ -z "$_path" ]; then return 1; fi

   local _fixed_path="$(echo $_path | sed -re 's,/*\s*$,,')"
   local _last="$(echo "$_fixed_path" | awk -F '/' '{ print $NF }')"
   local _regex_last="$(echo "$_last" | sed -e 's,\[,\\[,g' -e 's,],\\],g')"
   echo "$_fixed_path" | sed -re "s,/*${_regex_last}\$,,"
   return 0
}

function stdlib_forcepath
{
   local _file="$@"
   local _rootpath="$(stdlib_cdup $_file)"

   if [ -z "$_rootpath" ]; then return 1; fi

   if ! mkdir -p "$_rootpath"; then return 2; fi

   chown -R "$ORK_USER:$ORK_GROUP" "$_file" 2>/dev/null
   echo "$_file"
   return 0
}

function stdlib_filesearch
{
   local _root="$1"
   local _path="$2"
   local _file="$3"

   local _found_file="$_root/$_path/$_file"

   while [ ! -e "$_found_file" ]; do
      if [ -z "$_path" ]; then break; fi
      _path=$(stdlib_cdup "$_path")
      _found_file="$_root/$_path/$_file"
   done

   if [ -e "$_found_file" ]; then echo "$_found_file"; return 0; fi
   return 1
}

function stdlib_strip_quotes
{
   local _quoted="$@"

   echo "$_quoted" | sed "s/^\([\"']\)\(.*\)\1\$/\2/g" 
   return 0
}

function stdlib_tmpfile
{
   local _label="$@"

   if [ -z "$_label" ]; then
      _label="$(echo `date` $RANDOM | sha1sum - | awk '{ print $1 }')"
   fi

   echo "$(ork_pathroot "tmp")/$_label"
   return 0
}

ork_reconfigure stdlib
