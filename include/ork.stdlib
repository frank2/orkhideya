#!/bin/bash

ork_include stdout

function stdlib_trap
{
   "$@"
   _status="$?"

   if [ "$_status" != "0" ]; then
      stdout_error "Execution failed (status: $_status)"
      exit 1
   fi

   return 0
}

function stdlib_clean_trap
{
   local _function="$1"
   local _commands="$@"
   local _status="$(stdlib_trap "$_commands")"
   _status="$?"

   if [ "$_status" == "1" ]; then
      eval "$_function"
      exit 1
   fi

   return 0
}

function stdlib_isroot
{
   test "$(id -u)" == 0
   return $?
}

function stdlib_tolower
{
   _message="$@"
   echo $_message | tr '[:upper:]' '[:lower:]'
   return $?
}

function stdlib_toupper
{
   _message="$@"
   echo $_message | tr '[:lower:]' '[:upper:]'
   return $?
}

function stdlib_pathify
{
   _configuration="$@"
   echo "$_configuration" | sed -e 's,\.,/,g'
   return $?
}

function stdlib_configify
{
   _path="$@"
   echo "$_path" | sed -e 's,/,.,g'
   return $?
}

function stdlib_edit
{
   _output_file="$1"
   $EDITOR "$_output_file"
   return $?
}

function stdlib_strcount
{
   _needle="$1"
   _haystack="${@:2}"

   echo $_haystack | grep -o "$_needle" | wc -l
   return $?
}

function stdlib_cdup
{
   _path="$@"
   if [ -z "$_path" ]; then return 1; fi

   _last="$(echo $_path | awk -F '/' '{ print $NF }')"

   if echo $_path | grep -q "/$_last$"; then _last="/$_last"; fi

   echo $_path | sed -e "s,${_last}\$,,"
   return 0
}
