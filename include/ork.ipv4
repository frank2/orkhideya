#!/bin/bash

source orkhideya
ork_include stdlib

function ipv4_mask
{
   local _size="$1"
   if [ "$_size" -lt 0 -o "$_size" -gt 32 ]; then return 1; fi

   local _inversion="$((32 - $_size))"

   echo "$(( (2 ** $_size - 1) << $_inversion ))"
   return 0
}

function ipv4_valid
{
   local _address="$1"

   echo $_address | grep -q -P '((\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])'
   return $?
}

function ipv4_to_int
{
   local _address="$1"
   local _number="0"

   if ! ipv4_valid "$_address"; then return 1; fi

   for _chunk in $(seq 1 4); do
      local _octet="$(echo "$_address" | awk -F '.' "{ print \$$_chunk }")"
      _number="$(($_number | ($_octet << 32 - (8 * $_chunk))))"
   done

   echo $_number
   return 0
}

function ipv4_from_int
{
   local _number="$(stdlib_tolower "$1")"

   if echo $_number | grep -q '^[0-9a-f]$'; then
      _number="$(($_number))"
   elif echo $_number | grep -q '[^0-9]'; then
      return 1
   fi

   if [ "$_number" -lt "0" -o "$_number" -gt "$(ipv4_mask 32)" ]; then return 2; fi

   local _address=""

   for _chunk in $(seq 1 4); do
      if [ -n "$_address" ]; then
         _address="${_address}."
      fi

      _address="${_address}$(( ($_number >> (32 - ($_chunk * 8))) & 0xFF ))"
   done

   echo "$_address"
   return 0
}

function ipv4_cidr_valid
{
   local _cidr="$1"
   if ! ( echo "$_cidr" | grep -q '/' ) || [ "$(stdlib_strcount '/' "$_cidr")" -gt 1 ]; then return 1; fi

   local _address="$(echo "$_cidr" | awk -F '/' '{ print $1 }')"
   local _network="$(echo "$_cidr" | awk -F '/' '{ print $2 }')"
   [ -z "$(echo $_network | egrep -o '^[0-9]+$')" ] && return 2

   ipv4_valid "$_address" && [ "$_network" -ge "0" -a "$_network" -le "32" ]
   return $?
}

function ipv4_cidr_mask
{
   local _cidr="$1"
   ! ipv4_cidr_valid "$_cidr" && return 1

   echo "$_cidr" | awk -F '/' '{ print $2 }'
   return 0
}
function ipv4_cidr_netmask
{
   local _cidr="$1"
   ! ipv4_cidr_valid "$_cidr" && return 1

   ! ipv4_from_int "$(ipv4_mask "$(ipv4_cidr_mask "$_cidr")")" && return 2
   return 0
}

function ipv4_cidr_network
{
   local _cidr="$1"
   ! ipv4_cidr_valid "$_cidr" && return 1

   local _address="$(ipv4_to_int $(echo "$_cidr" | awk -F '/' '{ print $1 }') )"
   local _mask="$(ipv4_to_int $(ipv4_cidr_netmask "$_cidr"))"

   ! ipv4_from_int "$(($_address & $_mask))" && return 2
   return 0
}

function ipv4_cidr_broadcast
{
   local _cidr="$1"
   ! ipv4_cidr_valid "$_cidr" && return 1

   local _netmask="$(ipv4_to_int "$(ipv4_cidr_netmask "$_cidr")")"
   _netmask="$(($_netmask ^ 0xFFFFFFFF))"

   local _network="$(ipv4_to_int "$(ipv4_cidr_network "$_cidr")")"
   ! ipv4_from_int "$(($_network | $_netmask))" && return 2
   return 0
}

function ipv4_cidr_is_subnet
{
   local _network="$1"
   ! ipv4_cidr_valid "$_network" && return 1

   local _subnet="$2"
   ! ipv4_cidr_valid "$_subnet" && return 2

   local _network_mask="$(ipv4_cidr_mask "$_network")"
   local _subnet_mask="$(ipv4_cidr_mask "$_subnet")"
   [ "$_network_mask" -gt "$_subnet_mask" ] && return 3

   local _network_value="$(ipv4_cidr_network "$_network")"
   local _subnet_upgrade="$(ipv4_cidr_network "$_subnet")/$_network_mask"
   local _upgrade_value="$(ipv4_cidr_network "$_subnet_upgrade")"

   [ "$_upgrade_value" != "$_network_value" ] && return 4
   return 0
}

function ipv4_cidr_enum
{
   local _cidr="$1"
   ! ipv4_cidr_valid "$_cidr" && return 1

   nmap -sL -n "$_cidr" | grep -o -P '\d+\.\d+\.\d+\.\d+' | tail -n+2 | head -n-1
   return 0
}

function ipv4_cidr_random_address
{
   local _cidr="$1"
   ! ipv4_cidr_valid "$_cidr" && return 1

   local _inverted_mask="$(( $(ipv4_mask "$(ipv4_cidr_mask "$_cidr")") ^ 0xFFFFFFFF ))"
   local _new_address="$(( $(ipv4_to_int "$(ipv4_cidr_network "$_cidr")") | $(( ( ($RANDOM << 16) | $RANDOM) & $_inverted_mask )) ))"

   echo "$(ipv4_from_int $_new_address)"
   return 0
}

function ipv4_cidr_random_subnet
{
   local _cidr="$1"
   ! ipv4_cidr_valid "$_cidr" && return 1

   local _cidr_mask="$(ipv4_cidr_mask "$_cidr")"
   local _size="$2"
   if [ -z "$_size" ]; then _size="24"; fi
   [ "$_size" -lt "0" -o "$_size" -gt "32" -o "$_size" -lt "$_cidr_mask" ] && return 2

   local _random_base_address="$(ipv4_cidr_random_address "$_cidr")"
   local _new_cidr="$_random_base_address/$_size"

   echo "$(ipv4_cidr_network "$_new_cidr")/$_size"
   return 0
}

function ipv4_netmask_to_cidr_mask
{
   local _netmask="$1"
   ! ipv4_valid "$_netmask" && return 1

   local _netmask_value="$(ipv4_to_int $_netmask)"
   local _number_value="0"

   while [ "$_netmask_value" -gt 0 ]; do
      local _bit_value="$(($_netmask_value & 1))"

      if [ "$_bit_value" == "1" ]; then break; fi
      _netmask_value="$(($_netmask_value >> 1))"
      _number_value="$(($_number_value + 1))"
   done

   for _val in $(seq 1 $((32-$_number_value))); do
      local _bit_value="$(($_netmask_value & 1))"

      if [ "$_bit_value" == "0" ]; then return 2; fi
      _netmask_value="$(($_netmask_value >> 1))"
   done

   echo "$((32-$_number_value))"
   return 0
}

function ipv4_address_in_cidr
{
   local _address="$1"
   ! ipv4_valid "$_address" && return 1

   local _cidr="$2"
   ! ipv4_cidr_valid "$_cidr" && return 2

   local _network="$(ipv4_cidr_network "$_cidr")"
   local _netmask="$(ipv4_cidr_netmask "$_cidr")"

   local _address_value="$(ipv4_to_int "$_address")"
   local _netmask_value="$(ipv4_to_int "$_netmask")"
   local _mashed_value="$(ipv4_from_int "$(($_address_value & $_netmask_value))")"

   [ "$_network" != "$_mashed_value" ] && return 3
   return 0
}

function ipv4_address_is_private
{
   local _address="$1"
   ! ipv4_valid "$_address" && return 1
   ipv4_address_in_cidr "$_address" "10.0.0.0/8" && return 0
   ipv4_address_in_cidr "$_address" "172.16.0.0/12" && return 0
   ipv4_address_in_cidr "$_address" "192.168.0.0/16" && return 0
   return 2
}

function ipv4_address_add
{
   local _address="$1"
   ! ipv4_valid "$_address" && return 1

   local _value="$2"
   ! ipv4_from_int "$(($(ipv4_to_int "$_address") + $_value))" && return 2
   return 0
}

function ipv4_address_sub
{
   local _address="$1"
   ! ipv4_valid "$_address" && return 1

   local _value="$2"
   ! ipv4_from_int "$(($(ipv4_to_int "$_address") - $_value))" && return 2
   return 0
}

function ipv4_random_address
{
   local _random_32b="$((($RANDOM << 16) | $RANDOM))"
   ipv4_from_int "$_random_32b"
}

function ipv4_random_public_address
{
   local _random_address="$(ipv4_random_address)"

   while ipv4_address_is_private "$_random_address"; do _random_address="$(ipv4_random_address)"; done

   echo "$_random_address"
   return 0
}

function ipv4_random_private_address
{
   local _subnets="192.168.0.0/16 172.16.0.0/12 10.0.0.0/8"

   local _potential_subnets="$(stdlib_strcount ' ' "$_subnets")"
   local _chosen_subnet="$(echo $_subnets | awk "{ print \$$(($RANDOM % 3)) }")"

   ! ipv4_cidr_random_subnet "$_chosen_subnet" "$_size" && return 2
   return 0
}

function ipv4_random_private_network
{
   local _size="$1"

   if [ -z "$_size" ]; then _size="24"; fi
   [ "$_size" -lt "8" -o "$_size" -ge "32" ] && return 1
   
   local _subnets=""

   if [ "$_size" -ge "16" ]; then _subnets="$_subnets 192.168.0.0/16"; fi
   if [ "$_size" -ge "12" ]; then _subnets="$_subnets 172.16.0.0/12"; fi
   if [ "$_size" -ge "8" ]; then _subnets="$_subnets 10.0.0.0/8"; fi

   local _potential_subnets="$(stdlib_strcount ' ' "$_subnets")"
   local _chosen_subnet="$(($RANDOM % ($_potential_subnets+1) + 1))"
   _chosen_subnet="$(echo $_subnets | awk "{ print \$${_chosen_subnet} }")"

   ! ipv4_cidr_random_subnet "$_chosen_subnet" "$_size" && return 2
   return 0
}
