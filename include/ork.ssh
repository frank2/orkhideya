#!/bin/bash

source orkhideya
ork_include stdlib
ork_include stdout

function ssh_root
{
   ork_configpath "ssh"
   return 0
}

function ssh_site_root
{
   ork_pathcat "$(ssh_root)" "$ORK_SSH_SITEPATH"
   return 0
}

function ssh_site_path
{
   local _site="$1"
   ork_pathcat "$(ssh_site_root)" "$(stdlib_pathify "$_site")"
   return 0
}

function ssh_key_root
{
   ork_pathcat "$(ork_configpath ssh)" "$ORK_SSH_KEYPATH"
   return 0
}

function ssh_key_path
{
   local _site="$1"
   ork_pathcat "$(ssh_key_root)" "$(stdlib_pathify "$_site")"
   return 0
}

function ssh_proxy_root
{
   ork_pathcat "$(ork_configpath ssh)" "$ORK_SSH_PROXYPATH"
   return 0
}

function ssh_proxy_path
{
   local _proxy="$1"
   ork_pathcat "$(ssh_proxy_root)" "$(stdlib_pathify "$_proxy")"
   return 0
}

function ssh_proxy_exists
{
   local _proxy="$1"
   test -d "$(ssh_proxy_path $_proxy)"
   return $?
}

function ssh_proxy_file
{
   local _proxy="$1"
   if ! ssh_proxy_exists "$_proxy"; then return 1; fi

   echo "$(ssh_proxy_path $_proxy)/proxy"
   return 0
}

function ssh_proxy_connect
{
   local _proxy="$1"
   ! ssh_proxy_exists "$_proxy" && return 1

   local _host="$2"
   local _port="$3"
   local _username="$4"

   local _proxy_file="$(ssh_proxy_file "$_proxy")"
   ! test -x "$_proxy_file" && return 2
   ! "$_proxy_file" "$_host" "$_port" "$_username" && return 3
   return 0
}

function ssh_site_exists
{
   local _site="$1"
   test -d "$(ssh_site_path $_site)"
   return $?
}

function ssh_site_config_file
{
   local _site="$1"
   if ! ssh_site_exists "$_site"; then return 1; fi

   echo "$(ssh_site_path $_site)/config"
   return 0
}

function ssh_site_proxy_file
{
   local _site="$1"
   if ! ssh_site_exists "$_site"; then return 1; fi

   echo "$(ssh_site_path $_site)/proxy"
   return 0
}

function ssh_key_file
{
   # an ssh site can exist without a keyfile, but not the other way around.
   local _site="$1"
   if ! ssh_site_exists "$_site"; then return 1; fi

   local _key="$2"

   if [ -z "$_key" ]; then
      _key="$ORK_SSH_KEYFILE"
   fi
   
   echo "$(ssh_key_root)/$(stdlib_pathify "$_site")/$_key"
   return 0
}

function ssh_site_config_build
{
   local _site="$1"

   if [ -z "$_site" -o "$_site" == "-" ]; then
      stdout_warning "Site argument is blank. This will generate an SSH config for all configured sites."
      _site=""
   elif ! ssh_site_exists "$_site"; then 
      return 1
   fi

   local _site_root="$(ssh_site_root)"
   local _key_root="$(ssh_key_root)"
   local _search_path="$_site_root/$(stdlib_pathify $_site)"
   local _config_paths=$(for _config_path in $(find -L $_search_path -type d 2>/dev/null); do echo $(stdlib_strcount '/' "$_config_path") "$_config_path"; done | sort -g -r | awk '{ print $2 }' | sed -e "s,^$_site_root,,")

   local _ifs="$IFS"
   IFS="
"

   for _config_path in $_config_paths; do
      # take care before attempting to break/continue this loop. the logic
      # was written in a specific way to handle a series of edge-cases.

      local _inferred_host="$(stdlib_configify "${_config_path:1}")"
      local _key_path="$(ssh_key_path "$_inferred_host")"
      local _site_config="$(ssh_site_config_file "$_inferred_host")"
      local _site_proxy="$(ssh_site_proxy_file "$_inferred_host")"
      local _site_key="$(ssh_site_key "$_inferred_host")"
      local _site_host=""
      local _printed="0"
      
      if [ -e "$_site_key" -o -r "$_site_proxy" ]; then
         _site_host="$_inferred_host"
      fi

      if [ -x "$_site_config" ]; then
         local _executable_config="1"
         local _executable_output="$(stdlib_tmpfile)"

         "$_site_config" > "$_executable_output"

         _site_config="$_executable_output"
      fi

      if [ -n "$(test -r "$_site_config" && cat "$_site_config")" ]; then
         local _config_host="$(grep -o -P '^Host\s+(.*)$' "$_site_config" | awk '{ print $2 }')"

         if [ -n "$_config_host" ]; then
            _site_host="$_config_host"
         else
            _site_host="$(stdlib_configify "${_config_path:1}")"
         fi
      fi

      if [ -n "$_site_host" -a -z "$_config_host" ]; then
         local _occurrences="$(stdlib_strcount "$_config_path" "$_config_paths")"

         if [ -e "$_site_key" -o -e "$_site_config" -o -r "$_site_proxy" ]; then
            if [ "$_occurrences" -gt 1 ]; then
               if [ -n "$(test -e "$_site_config" && grep -o -P '^\s*HostName\s+' "$_site_config")" ]; then
                  echo "Host ${_site_host}.* $_site_host"
                  _printed=1
               else
                  echo "Host ${_site_host}.*"
                  _printed=1
               fi
            else
               echo "Host $_site_host"
               _printed=1
            fi
         fi
      elif [ -z "$_site_host" -a -z "$_config_host" -a \( -n "$(test -e "$_site_config" && cat "$_site_config")" -o -e "$_site_key" -o -r "$_site_proxy" \) ]; then
         echo "Host *"
         _printed=1
      fi

      if [ -n "$(test -e "$_site_config" && cat "$_site_config")" ]; then
         for _line in $(cat "$_site_config"); do
            if ! echo $_line | grep -q -P "^Host\s+"; then
               printf "\t%s\n" "$_line"
               _printed=1
            else
               printf "%s\n" "$_line"
               _printed=1
            fi
         done
      fi

      for _other_key in $(find -L "$_key_path" -maxdepth 1 ! -type d -a \( -type f -o -links +1 \) -a ! -name "*.pub" -a ! -name "$ORK_SSH_KEYFILE" 2>/dev/null | sed -e "s,^$_key_path/,,g"); do
         printf "\tIdentityFile %s\n" "$_key_path/$_other_key"
         _printed=1
      done

      if [ -e "$_site_key" ]; then
         printf "\tIdentityFile %s\n" "$_site_key"
         _printed=1
      fi

      if [ -r "$_site_proxy" ]; then
         local _proxy_file="$(ssh_proxy_file "$(cat $_site_proxy)")"
         printf "\tProxyCommand %s %%h %%p %%r\n" "$_proxy_file"
         _printed=1
      fi

      if [ -n "$_executable_config" ]; then
         shred -u "$_executable_output"
         _executable_config=""
      fi

      if [ "$_printed" == "1" ]; then
         printf "\n"
      fi
   done

   IFS="$_ifs"
   return 0
}

function ssh_site_config_edit
{
   local _site="$1"
   if [ -z "$_site" -o "$_site" == "-" ]; then _site=""; 
   elif ! ssh_site_exists "$_site"; then return 1; fi

   local _config_file="$(ssh_site_config_file "$_site")"

   stdlib_edit "$_config_file"
   return $?
}

function ssh_site_config_save
{
   local _site="$1"
   local _filename="$2"
   if [ "$_site" != "-" -a -n "$_site" ] && ! ssh_site_exists "$_site"; then return 1; fi

   if [ -z "$_filename" ]; then
      stdout_warning "No filename given. This will overwrite your current SSH config."
      local _continue="$(stdout_prompt_yesno "Continue?")"

      if [ "$_continue" == "n" ]; then return 2; fi

      _filename="$ORK_SSH_SSHCONFIG/config"
   fi

   _tmpfile="$(ork_pathroot tmp)/ssh_config"

   ssh_site_config_build "$_site" > "$_tmpfile"
   if [ "$?" != "0" ]; then 
      if [ -e "$_tmpfile" ]; then shred -u "$_tmpfile"; fi
      return 3
   fi

   if ! mv "$_tmpfile" "$_filename"; then return 4; fi

   chmod 600 "$_filename"
   return 0
}

function ssh_site_create
{
   local _site="$1"
   ssh_site_exists "$_site" &&  return 1
   ! mkdir -p "$(ssh_site_path $_site)" && return 2

   _config_file="$(ssh_site_config_file $_site)"
   ! touch "$_config_file" && return 3

   echo "# ORKHiDEYA config for site "$_site"" > "$_config_file"
   stdlib_edit "$_config_file"
   return $?
}

function ssh_site_rename
{
   local _site="$1"
   ! ssh_site_exists "$_site" && return 1

   local _rename="$2"
   [ -z "$_rename" ] && return 2
   ssh_site_exists "$_rename" && return 3

   _site_path="$(ssh_site_path "$_site")"
   _rename_path="$(ssh_site_path "$_rename")"

   ! mkdir -p "$_rename_path" && return 4
   ! mv "$_site_path/*" "$_rename_path/" && return 5

   if [ -d "$(ssh_key_path "$_site")" ]; then
      _site_keys="$(ssh_key_path "$_site")"
      _rename_keys="$(ssh_key_path "$_rename")"

      ! mkdir -p "$_rename_keys" && return 6
      ! mv "$_site_keys/*" "$_rename_keys/" && return 7
   fi

   return 0
}

function ssh_site_link
{
   local _site="$1"
   ! ssh_site_exists "$_site" && return 1

   local _link="$2"
   [ -z "$_link" ] && return 2
   ssh_site_exists "$_link" && return 3

   _site_path="$(ssh_site_path "$_site")"
   _link_path="$(ssh_site_path "$_link")"

   ! mkdir -p "$_link_path" && return 4
   ! find "$_site_path" -maxdepth 1 -type f -exec ln -s {} "$_link_path" \; 2>/dev/null && return 5

   if [ -d "$(ssh_key_path "$_site")" ]; then
      _site_keys="$(ssh_key_path "$_site")"
      _link_keys="$(ssh_key_path "$_link")"

      ! mkdir -p "$_link_keys" && return 6
      ! find "$_site_keys" -maxdepth 1 -type f -exec ln -s {} "$_link_keys" \; 2>/dev/null && return 7
   fi

   return 0
}

function ssh_site_unlink
{
   local _site="$1"
   ! ssh_site_exists "$_site" && return 1

   local _continue="$(stdout_prompt_yesno "Confirm removal of site $(stdout_color_wrap main-focused "$_site") and its corresponding keys.")"
   test "$_continue" != "y" && return 0

   local _path="$(ssh_site_path "$_site")"
   ! rm -rf "$_path" && return 2
   test -d "$(ssh_key_path "$_site")" && ! rm -rf "$(ssh_key_path "$_site")" && return 3
   return 0
}

function ssh_site_delete
{
   ssh_site_unlink $@
   return $?
}

function ssh_key_gen
{
   local _site="$1"
   local _key="$2"
   local _arguments="${@:3}"

   if [ "$_site" == "-" ]; then
      stdout_warning "Site argument is blank. This will generate a default key."
      _site=""
   elif ! ssh_site_exists "$_site"; then 
      return 1
   fi

   if [ -z "$_key" -o "$_key" == "-" ]; then
      _key="$ORK_SSH_KEYFILE"
   fi

   if [ -z "$_arguments" ] || ! echo "$_arguments" | grep -q -P "(^-f|\s+-f)"; then
      local _key_file="$(ssh_key_file "$_site" "$_key")"
      stdout_warning "No keyfile specified on the commandline, using default key $(stdout_color_wrap main-focused "$_key_file")."

      if [ -e "$_key_file" ]; then stdout_error "Key already exists"; return 2; fi

      _arguments="$_arguments -f "$_key_file""
   fi

   if [ -z "$_arguments" ] || ! echo "$_arguments" | grep -q -P "(^-t|\s+-t)"; then
      stdout_warning "No key type specified on the commandline. Using ED25519 by default."
      _arguments="$_arguments -t "ed25519""
   fi

   if [ ! -d "$(ssh_key_path "$_site")" ]; then
      if ! mkdir -p "$(ssh_key_path "$_site")"; then return 3; fi
   fi

   stdout_warning "Running $(stdout_color_wrap main-focused ssh-keygen "$_arguments")."
   ssh-keygen $_arguments
   _status="$?"

   if [ "$_status" != "0" ]; then
      stdout_error "ssh-keygen failed (status: $_status)"
      if [ -e "$_key_file" ]; then shred -u "$_key_file"; fi
      return 4
   fi

   return 0
}

function ssh_key_select
{
   local _site="$1"
   local _key="$2"

   if [ -z "$_key" ]; then
      _key="$ORK_SSH_KEYFILE"
   fi
   
   local _keys="$(ssh_site_keys "$_site" "$_key")"
   if [ "$?" != "0" ]; then return 2; fi

   local _keycount="$(stdlib_strcount ':' "$_keys")"

   if [ "$_keycount" -gt "0" ]; then
      local _selections="$(seq 1 $(($_keycount+1)))"
      local _valid_selection=""

      while [ -z "$_valid_selection" ]; do
         stdout_normal "There is more than one key associated with $(stdout_color_wrap main-focused "$_site")."

         for _selection in $_selections; do
            stdout_normal "$(printf "%2d) %s" $_selection "$(stdlib_configify "$(echo $_keys | awk -F ':' "{ print \$$_selection }" | sed -e "s,^$(ssh_key_root)/,," -e "s,${ORK_SSH_KEYFILE}\$,$(color_render "$(stdout_color_wrap main-focused "${ORK_SSH_KEYFILE}"),")")")")"
         done

         stdout_normal "$(stdout_color_wrap main-unfocused ---)"
         _valid_selection="$(stdout_prompt "Please select a key.")"

         if ! echo $_valid_selection | grep -q -P "^\d+$" || ! echo $_selections | grep -q -P "(\s*$_valid_selection\s+|\s+$_valid_selection\s*)"; then
            stdout_error "Invalid selection: $(stdout_color_wrap main-focused "$_valid_selection")"
            _valid_selection=""
         fi
      done

      _key="$(echo $_keys | awk -F ':' "{ print \$${_valid_selection} }")"
   else
      _key="$_keys"
   fi

   if [ ! -e "${_key}.pub" ]; then
      stdout_error "No public key found for private keyfile."
      return 2
   fi

   echo "$_key"
   return 0
}

function ssh_key_exchange
{
   local _site="$1"
   local _key="$2"
   
   if [ -z "$_key" ]; then
      _key="$(ssh_key_select "$_site" "$ORK_SSH_KEYFILE").pub"
   else
      _key="$(ssh_key_select "$_site" "$_key").pub"
   fi

   local _remote_ssh_config="$3"
   if [ -z "$_remote_ssh_config" ]; then _remote_ssh_config="~/.ssh"; fi

   if [ "$?" != "0" ]; then return 1; fi

   stdout_normal "Using public keyfile $(stdout_color_wrap main-focused "${_key}")."
   stdout_warning "Attempting key exchange with $(stdout_color_wrap main-focused "$_site")."

   cat $_key | ssh "$_site" "umask 077; test -d "$_remote_ssh_config" || mkdir "$_remote_ssh_config" ; cat - >> "$_remote_ssh_config/authorized_keys" ; sort -u "$_remote_ssh_config/authorized_keys" -o "$_remote_ssh_config/authorized_keys""

   if [ "$?" != "0" ]; then
      stdout_error "Key exchange failed."
      return 3
   fi

   stdout_normal "Key exchanged successfully."
   return 0
}

function ssh_site_list
{
   local _site="$1"

   if [ "$_site" == "-" ]; then _site=""; fi

   if [ -n "$_site" ]; then local _site_prefix="${_site}."; fi

   local _site_root="$(ork_pathcat "$(ssh_site_path)" "$(stdlib_pathify "$_site")")"
   find "$_site_root" -type d | tail -n+2 | sed -e "s,^$_site_root/,$_site_prefix," 2>/dev/null | sed -e 's,/,.,g'
   return 0
}

function ssh_site_key
{
   local _site="$1"
   local _key="$2"

   if [ -z "$_key" ]; then
      _key="$ORK_SSH_KEYFILE"
   fi

   if [ "$_site" == "-" ]; then
      stdout_warning "Site argument is blank. This will only return the root key."
      _site=""
   fi

   local _keyfile="$(ssh_key_file "$_site" "$_key")"

   if [ ! -r "$_keyfile" ]; then return 1; fi
   echo $_keyfile | sed -r -e 's,/+,/,g'
   return 0
}

function ssh_site_keys
{
   local _site="$1"
   local _keyname="$2"

   if [ -z "$_keyname" ]; then
      _keyname="$ORK_SSH_KEYFILE"
   fi

   if [ "$_site" == "-" ]; then
      stdout_warning "Site argument is blank. This will only return the root key."
      _site=""
   elif ! ssh_site_exists "$_site"; then 
      return 1
   fi

   local _keys=""
   local _root="$(ssh_key_root)"
   local _keypath="$(stdlib_pathify "$_site")"

   while : ; do
      if [ -n "$_root_key" ]; then break; fi
      if [ -z "$_keypath" ]; then local _root_key="1"; fi
      local _keyfile="$(ssh_site_key "$(stdlib_configify "$_keypath")" "$_keyname" 3>/dev/null)"

      if [ -n "$_keyfile" ]; then
         if [ -z "$_keys" ]; then
            _keys="$_keyfile"
         else
            _keys="$_keys:$_keyfile"
         fi
      fi
      
      _keypath="$(stdlib_cdup "$_keypath")"
   done

   echo "$_keys"
   return 0
}

ORK_SSH_SSHCONFIG="$HOME/.ssh"
ORK_SSH_KEYFILE="id_ecc"
ORK_SSH_SITEPATH="sites"
ORK_SSH_KEYPATH="keys"
ORK_SSH_PROXYPATH="proxies"

ork_reconfigure ssh
