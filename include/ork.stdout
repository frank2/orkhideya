#!/bin/bash

source orkhideya
ork_include color

function stdout_depends
{
   ork_path_check tput
   return $?
}

function stdout_color
{
   local _color="$1"
   local _message="${@:2}"

   case "$_color" in
      "attention")
         _color="$ORK_STDOUT_COLOR_ATTENTION"
         ;;
      "decorative")
         _color="$ORK_STDOUT_COLOR_DECORATIVE"
         ;;
      "alternate")
         _color="$ORK_STDOUT_COLOR_ALTERNATE"
         ;;
      "window")
         _color="$ORK_STDOUT_COLOR_WINDOW"
         ;;
      "warning")
         _color="$ORK_STDOUT_COLOR_WARNING"
         ;;
      "text")
         _color="$ORK_STDOUT_COLOR_TEXT"
         ;;
      "main")
         _color="$ORK_STDOUT_COLOR_MAIN"
         ;;
      "main-focused")
         _color="$ORK_STDOUT_COLOR_MAIN_FOCUSED"
         ;;
      "main-unfocused")
         _color="$ORK_STDOUT_COLOR_MAIN_UNFOCUSED"
         ;;
      "normal")
         _color="$ORK_STDOUT_COLOR_NORMAL"
         ;;
      "desperate")
         _color="$ORK_STDOUT_COLOR_DESPERATE"
         ;;
      "terminate")
         _color="$CC_TERMINATE"
         ;;
      *)
         return 1
         ;;
   esac

   if [ "$_color" == "$CC_TERMINATE" ]; then
      echo $_color
   else
      echo "${_color}${_message}"
   fi

   return 0
}

function stdout_color_wrap
{
   local _color="$1"
   local _message="${@:2}"

   echo "$(stdout_color "$_color" "$_message")$(stdout_color terminate)"
   return 0
}

function stdout_isterm
{
   test -t 2
   echo $?
   return 0
}

function stdout_width
{
   tput cols
   return $?
}

function stdout_printf
{
   local _format="$1"
   local _args="${@:2}"
   printf "$_format" "$_args" 1>&2
   return 0
}

function stdout_puts
{
   local _output="$@"

   if [ "$(stdout_isterm)" == "0" ]; then
      echo "$(color_render "$_output")" 1>&2
   else
      echo "$(color_strip "$_output")" 1>&2
   fi
}

function stdout_indicator
{
   local _indicator="$1"

   case "$_indicator" in
      "warning")
         echo "${ORK_STDOUT_INDICATOR_PREFIX}${ORK_STDOUT_INDICATOR_WARNING}${ORK_STDOUT_INDICATOR_SUFFIX}"
         ;;
      "error")
         echo "${ORK_STDOUT_INDICATOR_PREFIX}${ORK_STDOUT_INDICATOR_ERROR}${ORK_STDOUT_INDICATOR_SUFFIX}"
         ;;
      "debug")
         echo "${ORK_STDOUT_INDICATOR_PREFIX}${ORK_STDOUT_INDICATOR_DEBUG}${ORK_STDOUT_INDICATOR_SUFFIX}"
         ;;
      *)
         echo "${ORK_STDOUT_INDICATOR_PREFIX}${ORK_STDOUT_INDICATOR_NORMAL}${ORK_STDOUT_INDICATOR_SUFFIX}"
         ;;
   esac

   return 0
}

function stdout_inform
{
   local _status="$1"
   local _message="${@:2}"
   
   echo "${ORK_STDOUT_STATUS_PREFIX} $(stdout_indicator $_status) $(stdout_color main-focused "$ORK_STDOUT_STATUS_EXECUTOR")${ORK_STDOUT_STATUS_SUFFIX} $_message"
   return 0
}

function stdout_status
{
   local _status="$1"
   local _message="${@:2}"

   if [ "$_status" != "debug" -o "$_status" == "debug" -a -n "$ORK_DEBUG" ]; then
      stdout_puts "$(stdout_inform $_status $_message)"
   fi

   return 0
}

function stdout_normal
{
   local _message="$@"
   stdout_status normal "$_message"
   return 0
}

function stdout_warning
{
   local _message="$@"
   stdout_status warning "$_message"
   return 0
}

function stdout_error
{
   local _message="$@"
   stdout_status error "$_message"
   return 0
}

function stdout_debug
{
   local _message="$@"
   stdout_status debug "$_message"
   return 0
}

function stdout_prompt
{
   local _prompt="$@"
   stdout_warning "$_prompt"
   stdout_printf "%s " "$(color_render $ORK_STDOUT_PROMPT)"

   local _response=""
   read _response

   echo "$_response"
   return 0
}

# TODO expand this into a generic selection thing
function stdout_prompt_yesno
{
   local _prompt="$@"
   local _response=""

   while [ "$_response" != "y" -a "$_response" != "n" ]; do
      _response="$(stdlib_tolower "$(stdout_prompt "$_prompt [$(stdout_color_wrap main-focused y)/$(stdout_color_wrap main-focused N)]")")"

      if [ -z "$_response" ]; then
          _response="n"
      elif [ "$_response" != "y" -a "$_response" != "n" ]; then
         stdout_error "Invalid response."
      fi
   done
   
   echo "$_response"
   return 0
}

function stdout_prompt_sequence
{
    local _prompt="$1"
    test -z "$_prompt" && return 1

    local _sequence="0"
    local _items="$((${#@}-1))"
    local _user_decision=""

    while [ -z "$_user_decision" ]; do
        while [ "$_sequence" -lt "$_items" ]; do
            _value_decision="${@:$(($_sequence+2)):1}"
            stdout_normal "$(printf '%2d' $(($_sequence+1)))$(stdout_color_wrap main-unfocused ')') $(stdout_color_wrap main-focused "$_value_decision")"
            _sequence="$(($_sequence+1))"
        done

        _response="$(stdout_prompt "$_prompt")"

        if [ -z "$(echo "$_response" | egrep -o '^[0-9]+$')" ]; then
            stdout_error "Response must be a numeric value."
            _sequence="0"
            continue
        fi

        if [ "$_response" -lt "1" -o "$_response" -gt "$((${#@}-1))" ]; then
            stdout_error "Invalid response."
            _sequence="0"
            continue
        fi

        _user_decision="$_response"
    done

    echo "${@:$(($_user_decision+1)):1}"
    return 0
}

# theme colors
ORK_STDOUT_COLOR_ATTENTION="$(color_fg lightgreen)"
ORK_STDOUT_COLOR_DECORATIVE="$(color_fg purple)"
ORK_STDOUT_COLOR_ALTERNATE="$(color_fg cyan)"
ORK_STDOUT_COLOR_WINDOW="$(color_fg lightcyan)"
ORK_STDOUT_COLOR_WARNING="$(color_fg lightcyan)"
ORK_STDOUT_COLOR_TEXT="$(color_fg lightpurple)"
ORK_STDOUT_COLOR_NORMAL="$(color_fg lightcyan)"
ORK_STDOUT_COLOR_MAIN="$(color_fg lightpurple)"
ORK_STDOUT_COLOR_MAIN_FOCUSED="$(color_fg lightpurple)"
ORK_STDOUT_COLOR_MAIN_UNFOCUSED="$(color_fg purple)"
ORK_STDOUT_COLOR_DESPERATE="$(color_fg lightgreen)"

ORK_STDOUT_SYSTEM_NAME="$(stdout_color main 'ORKH')"
ORK_STDOUT_SYSTEM_NAME="${ORK_STDOUT_SYSTEM_NAME}$(stdout_color attention 'i')"
ORK_STDOUT_SYSTEM_NAME="${ORK_STDOUT_SYSTEM_NAME}$(stdout_color main 'DEYA')"

# status prefix and suffix
ORK_STDOUT_STATUS_PREFIX="$(stdout_color normal ']')"
ORK_STDOUT_STATUS_PREFIX="${ORK_STDOUT_STATUS_PREFIX}$(stdout_color warning ']')"
ORK_STDOUT_STATUS_PREFIX="${ORK_STDOUT_STATUS_PREFIX} ${ORK_STDOUT_SYSTEM_NAME}"
ORK_STDOUT_STATUS_PREFIX="${ORK_STDOUT_STATUS_PREFIX}$(stdout_color decorative ']')"

ORK_STDOUT_STATUS_EXECUTOR="$(if [ "${0:0:1}" != "-" ]; then echo `echo $0 | awk -F '/' '{ print $(NF-1) }'`/`echo $0 | awk -F '/' '{ print $NF }'`; else echo $0; fi)"

ORK_STDOUT_STATUS_SUFFIX="$(stdout_color_wrap decorative '>')"

# indicators
ORK_STDOUT_INDICATOR_PREFIX="$(stdout_color decorative '[')"
ORK_STDOUT_INDICATOR_SUFFIX="$(stdout_color decorative ']')"

ORK_STDOUT_INDICATOR_NORMAL="$(stdout_color normal '+')"
ORK_STDOUT_INDICATOR_WARNING="$(stdout_color warning '?')"
ORK_STDOUT_INDICATOR_ERROR="$(stdout_color attention '!')"
ORK_STDOUT_INDICATOR_DEBUG="$(stdout_color attention 'D')"

# prompt
ORK_STDOUT_PROMPT="$(stdout_color_wrap attention '>>')"

# make this reconfigurable
ork_reconfigure stdout
