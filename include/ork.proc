#!/bin/bash

source orkhideya
ork_include stdlib

function proc_root
{
   ork_configpath "proc"
   return 0
}

function proc_pid_root
{
   ork_pathcat "$(ork_pathroot tmp)" "$ORK_PROC_PIDPATH"
   return 0
}

function proc_template_root
{
   ork_pathcat "$(proc_root)" "$ORK_PROC_TEMPLATE_PATH"
   return 0
}

function proc_silent
{
   "$@" &>/dev/null
   return $?
}

function proc_is_running
{
   _pid="$1"
   test -n "$(ps -p "$_pid" | tail -n+2)"
   return $?
}

function proc_kill
{
   _pid="$1"
   ! proc_is_running "$_pid" && return 1

   proc_silent kill -9 "$_pid"
   if [ "$?" != "0" ]; then return 2; fi
   return 0
}

function proc_label_pid_file
{
   local _label="$1"
   echo "$(proc_pid_root)/$_label"
   return 0
}

function proc_label_exists
{
   local _label="$1"

   test -e "$(proc_pid_file "$_label")"
   return $?
}

function proc_label_pid
{
   local _label="$1"

   if ! proc_label_exists "$_label"; then return 1; fi
   cat "$(proc_pid_file "$_label")"

   if [ "$?" != "0" ]; then return 2; fi
   return 0
}

function proc_label_running
{
   local _label="$1"

   if ! proc_label_exists "$_label"; then return 1; fi
   proc_is_running "$(proc_label_pid "$_label")"
   test -n "$(ps -p "$(proc_pid "$_label")" | tail -n+2)"
   return $?
}

function proc_label_spawn
{
   local _label="$1"
   local _commandline="${@:2}"

   if [ -z "$_label" ]; then return 1; fi

   local _filename="$(stdlib_forcepath "$(proc_pid_root)/$_label")"

   if [ -z "$_filename" ]; then return 2
   elif [ -e "$_filename" ]; then return 3 # pid by this label exists already
   fi

   $_commandline &
   _resulting_pid="$!"
   if [ -z "$_resulting_pid" ]; then return 4; fi

   echo "$_resulting_pid" > "$_filename"
   return 0
}

function proc_label_kill
{
   local _label="$1"
   if ! proc_exists "$_label"; then return 1; fi

   if proc_running "$_label"; then
      local _pid="$(proc_pid "$_label")"
      proc_silent kill -9 "$_pid"
   fi

   _pid_file="$(proc_pid_file "$_label")"
   proc_silent rm -rf "$_pid_file"
   return 0
}

function proc_template_exists
{
   local _template="$1"
   test -e "$(proc_template_root)/$(stdlib_pathify "$_template")"
   return $?
}

function proc_template_run
{
   local _template="$1"
   local _args="${@:2}"

   ! proc_template_exists "$_template" && return 1
   local _file="$(stdlib_filesearch "$(proc_template_root)" "$(stdlib_pathify "$_template")" "$ORK_PROC_TEMPLATE_RUN_FILE")"

   if [ ! -x "$_file" ]; then return 2; fi

   local _commandline="$($_file "$_args")"
   if [ -z "$_commandline" ]; then return 3; fi

   echo "$_commandline"
   return 0
}

function proc_template_kill
{
   local _template="$1"
   local _args="${@:2}"

   ! proc_template_exists "$_template" && return 1
   local _file="$(stdlib_filesearch "$(proc_template_root)" "$(stdlib_pathify "$_template")" "$ORK_PROC_TEMPLATE_KILL_FILE")"

   if [ ! -x "$_file" ]; then return 1; fi

   "$_file" $_args
   if [ "$?" != "0" ]; then return 2; fi
   return 0
}

function proc_template_exec
{
   local _label="$1"
   local _template="$2"
   local _args="${@:3}"

   _commandline="$(proc_template_run "$_template" "$_args")"
   if [ -z "$_commandline" ]; then return 1; fi

   proc_label_spawn "$_label" "$_args"
   local _status="$?"

   if [ "$_status" != "0" ]; then return 2; fi
   return 0
}

ORK_PROC_PID_PATH="pid"
ORK_PROC_TEMPLATE_PATH="templates"
ORK_PROC_TEMPLATE_RUN_FILE="run"
ORK_PROC_TEMPLATE_KILL_FILE="kill"
