#!/bin/bash

source orkhideya
ork_include stdlib

function proc_root
{
   ork_configpath "proc"
   return 0
}

function proc_pid_root
{
   ork_pathcat "$(ork_pathroot tmp)" "$ORK_PROC_PID_PATH"
   return 0
}

function proc_silent
{
   "$@" &>/dev/null
   return $?
}

function proc_is_running
{
   _pid="$1"
   test -n "$(ps -p "$_pid" | tail -n+2)"
   return $?
}

function proc_kill
{
   _pid="$1"
   ! proc_is_running "$_pid" && return 1

   while proc_is_running "$_pid"; do
      proc_silent kill -9 "$_pid"
      if ! proc_is_running "$_pid"; then break; fi
      sleep 1
   done

   return 0
}

function proc_timed_kill
{
   _pid="$1"
   _timeout="$2"

   sleep $_timeout && proc_kill "$_pid"
   return $?
}

function proc_label_path
{
   local _label="$1"
   echo "$(proc_pid_root)/$_label"
   return 0
}

function proc_label_exists
{
   local _label="$1"

   test -e "$(proc_label_path "$_label")"
   return $?
}

function proc_label_pid_file
{
   local _label="$1"
   local _procpath="$(proc_label_path "$_label")"

   ork_pathcat "$_procpath" "pid"
   return 0
}

function proc_label_stdout_file
{
   local _label="$1"
   local _procpath="$(proc_label_path "$_label")"

   ork_pathcat "$_procpath" "stdout"
   return 0
}

function proc_label_stderr_file
{
   local _label="$1"
   local _procpath="$(proc_label_path "$_label")"

   ork_pathcat "$_procpath" "stderr"
   return 0
}

function proc_label_get_stdout
{
   local _label="$1"
   local _stdout_file="$(proc_label_stdout_file "$_label")"

   ! test -r "$_stdout_file" && return 1
   cat "$_stdout_file"
   return 0
}

function proc_label_get_stderr
{
   local _label="$1"
   local _stderr_file="$(proc_label_stderr_file "$_label")"

   ! test -r "$_stderr_file" && return 1
   cat "$_stderr_file"
   return 0
}

function proc_label_get_pid
{
   local _label="$1"
   ! proc_label_exists "$_label" && return 1

   local _procpath="$(proc_label_path "$_label")"
   ! test -r "$_procpath/pid" && return 2

   cat "$_procpath/pid"

   [ "$?" != "0" ] && return 3
   return 0
}

function proc_label_is_running
{
   local _label="$1"

   ! proc_label_exists "$_label" && return 1
   ! proc_is_running "$(proc_label_get_pid "$_label")" && return 2
   return 0
}

function proc_label_spawn
{
   local _label="$1"
   local _commandline="${@:2}"
   [ -z "$_label" ] && return 1

   local _pidpath="$(proc_label_path "$_label")"
   [ -z "$_pidpath" ] && return 2
   [ -e "$(proc_label_pid_file "$_label")" ] && return 3 # pid by this label exists already

   local _pidfile="$(stdlib_forcepath "$(proc_label_pid_file "$_label")")"
   local _stdoutfile="$(stdlib_forcepath "$(proc_label_stdout_file "$_label")")"
   local _stderrfile="$(stdlib_forcepath "$(proc_label_stderr_file "$_label")")"

   stdout_warning "Executing: $(stdout_color_wrap main-focused "$_commandline")"

   $_commandline 1>"$_stdoutfile" 2>"$_stderrfile" &
   local _new_pid="$!"
   sleep 1

   local _resulting_pid="$(ps kstart_time ax | sort -r | awk '{ print $1,$5 }' | grep "$(echo $_commandline | awk '{ print $1 }')" | grep -v grep | head -n1 | awk '{ print $1 }')"
   if [ -z "$_resulting_pid" -o "$(($_resulting_pid))" -lt "$(($_new_pid))" ]; then 
      stdout_error "Fork failure. [new=$_new_pid, result=$_resulting_pid]"
      stdout_error "stderr:"
      cat "$_stderrfile" 1>&2
      proc_silent rm -rf "$_pidpath" 
      return 4
   fi

   echo "$_resulting_pid" > "$_pidfile"
   return 0
}

function proc_label_spawn_silent
{
   local _label="$1"
   local _commandline="${@:2}"

   local _stdoutfile="$(stdlib_forcepath "$(proc_label_stdout_file "$_label")")"
   local _stderrfile="$(stdlib_forcepath "$(proc_label_stderr_file "$_label")")"

   ! ln -s "/dev/null" "$_stdoutfile" && return -1
   ! ln -s "/dev/null" "$_stderrfile" && return -2
   proc_label_spawn "$_label" $_commandline &>/dev/null
   return $?
}

function proc_label_kill
{
   local _label="$1"
   local _args="${@:2}"
   ! proc_label_exists "$_label" && return 1

   local _procpath="$(proc_label_path "$_label")"
   local _pid="$(proc_label_get_pid "$_label")"
   if [ -z "$_pid" ]; then # this pid went poof I guess
      proc_silent rm -rf "$_procpath"
      return 0
   fi

   if proc_label_is_running "$_label"; then
      local _pid="$(proc_label_get_pid "$_label")"
      [ -n "$_pid" ] && kill -9 "$_pid"
   fi 

   proc_silent rm -rf "$_procpath"
   return 0
}

ORK_PROC_PID_PATH="pid"
