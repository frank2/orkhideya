#!/bin/bash

source orkhideya
ork_include stdlib

function proc_root
{
   ork_configpath "proc"
   return 0
}

function proc_pid_root
{
   ork_pathcat "$(ork_pathroot tmp)" "$ORK_PROC_PIDPATH"
   return 0
}

function proc_pid_file
{
   local _label="$1"
   echo "$(proc_pid_root)/$_label"
   return 0
}

function proc_exists
{
   local _label="$1"

   test -e "$(proc_pid_file $_label)"
   return $?
}

function proc_pid
{
   local _label="$1"

   if ! proc_exists "$_label"; then return 1; fi
   cat "$(proc_pid_file "$_label")"

   if [ "$?" != "0" ]; then return 2; fi
   return 0
}

function proc_running
{
   local _label="$1"

   if ! proc_exists "$_label"; then return 1; fi
   test -n "$(ps -p "$(proc_pid "$_label")" | tail -n+2)"
   return $?
}

function proc_spawn
{
   local _label="$1"
   local _commandline="${@:2}"

   if [ -z "$_label" ]; then return 1
   elif [ "$_label" == '-' ]; then
   fi

   local _filename="$(stdlib_forcepath "$(proc_pid_root)/$_label")"

   if [ -z "$_filename" ]; then return 2
   elif [ -e "$_filename" ]; then return 3 # pid by this label exists already
   fi

   $_commandline &
   _resulting_pid="$!"
   if [ -z "$_resulting_pid" ]; then return 4; fi

   echo "$__resulting_pid" > "$_filename"
   return 0
}

function proc_silent
{
   "$@" &>/dev/null
   return $?
}

function proc_kill
{
   local _label="$1"
   if ! proc_exists "$_label"; then return 1; fi

   if proc_running "$_label"; then
      local _pid="$(proc_pid "$_label")"
      proc_silent kill -9 "$_pid"
   fi

   _pid_file="$(proc_pid_file "$_label")"
   proc_silent rm -rf "$_pid_file"
   return 0
}

function proc_config_run
{
   local _config="$1"
   local _args="${@:2}"
   local _file="$(stdlib_filesearch "$(proc_root)" "$(stdlib_pathify "$_config")" "$ORK_PROC_RUN_FILE")"

   if [ ! -x "$_file" ]; then return 1; fi

   local _commandline="$($_file "$_args")"
   if [ -z "$_commandline" ]; then return 2; fi

   echo "$_commandline"
   return 0
}

function proc_config_kill
{
   local _config="$1"
   local _args="${@:2}"
   local _file="$(stdlib_filesearch "$(proc_root)" "$(stdlib_pathify "$_config")" "$ORK_PROC_KILL_FILE")"

   if [ ! -x "$_file" ]; then return 1; fi

   $_file "$_args"
   if [ "$?" != "0" ]; then return 2; fi
   return 0
}

function proc_config_kill
{
   local _config="$1"
   local _args="${@:2}"

   ! proc_config_kill_exists "$_config" && return 1

   local _config_file="$(proc_config_kill_file "$_config")"
   if [ ! -x "$_config_file" ]; then return 2; fi

   $_config_file "$_args"
   if [ "$?" != "0" ]; then return 3; fi

   return 0
}

ORK_PROC_PID_PATH="pid"
ORK_PROC_RUN_FILE="run"
ORK_PROC_KILL_FILE="kill"
