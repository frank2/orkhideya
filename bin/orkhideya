#!/bin/bash

EXECUTOR="${0##*/}" # one of those weird old tricks from @twopir

# some Ron Pauls to start us out
function ork_pathcat
{
   _root="$(ork_pathroot root)"

   for _path in $@; do
      if [ "${_path:0:1}" == '/' ]; then
         _root="$_path"
      else
         _root="$_root/$_path"
      fi
   done

   echo "$_root"
   return 0
}

function ork_pathroot
{
   _pathroot="$1"

   case "$_pathroot" in
      root)
         echo $ORK_ROOT
         ;;
      etc-global)
         ork_pathcat $ORK_ETC_GLOBAL
         ;;
      etc-local)
         ork_pathcat $ORK_ETC_LOCAL
         ;;
      bin)
         ork_pathcat $ORK_BIN
         ;;
      path)
         ork_pathcat $ORK_INCLUDE
         ;;
      var)
         ork_pathcat $ORK_VAR
         ;;
      tmp)
         ork_pathcat $ORK_TMP
         ;;
      *)
         return 1
   esac

   return 0
}

function ork_verify
{
   local _library="$1"
   local _ifs="$IFS"
   IFS=":"

   for _path in $ORK_PATH; do
      local _filename="$_path/ork.$_library"

      if [ -r "$_filename" ]; then break; fi
   done

   IFS="$_ifs"

   if [ ! -r "$_filename" ]; then 
      echo "$EXECUTOR: orkhideya: bad library (fatal): $_library" 1>&2
      exit 1
   fi

   return 0
}

function ork_configpath
{
   _library="$1"
   ork_verify "$_library"

   _local_version="$(ork_pathcat "$(ork_pathroot etc-local)" "$_library")"
   _global_version="$(ork_pathcat "$(ork_pathroot etc-global)" "$_library")"

   if [ ! -d "$_local_version" ]; then echo "$_global_version"; else echo "$_local_version"; fi
   return 0
}

function ork_reconfigure
{
   _library="$1"
   ork_verify "$_library"

   _config="$(ork_pathcat "$(ork_configpath $_library)" "config")"

   if [ -r "$_config" ]; then
      source "$_config"
      return $?
   fi

   return 0
}

function ork_edit
{
   local _library="$1"
   local _ifs="$IFS"
   IFS=":"

   for _path in $ORK_PATH; do
      local _filename="$_path/ork.$_library"

      if [ -r "$_filename" ]; then break; fi
   done

   IFS="$_ifs"

   if [ ! -r "$_filename" ]; then return 1; fi
   if [ ! -x "$EDITOR" -a ! -x "$(which $EDITOR)" ]; then return 2; fi

   $EDITOR "$_filename"
   return 0
}

function ork_include
{
   local _library="$1"
   local _ifs="$IFS"

   if [ "$_library" == "-" ]; then
      IFS=":"

      for _path in $ORK_PATH; do
         IFS="$_ifs"

         for _file in $(find "$_path/" -name "ork.*" -type f -o -type l); do
            local _library="$(echo $_file | awk -F '/' '{ print $NF }' | sed -e 's/^ork\.//g')"

            # root is the only exception. it serves a special purpose.
            if [ "$_library" == "root" ]; then continue; fi

            ork_include $_library
            local _status="$?"

            if [ "$_status" != "0" ]; then
               return "$_status"
            fi
         done
         
         IFS=":"
      done

      IFS="$_ifs"
      return 0
   fi

   IFS=":"

   for _path in $ORK_PATH; do
      local _filename="$_path/ork.$_library"

      if [ -r "$_filename" ]; then break; fi
   done

   IFS="$_ifs"

   if [ ! -r "$_filename" ]; then
      echo "$EXECUTOR: orkhideya: bad include (fatal): $_library ($_filename)" 1>&2
      exit 1
   fi

   # quit cleanly when we run into something we've already sourced
   if echo "$ORK_SOURCE_PATH" | grep -q ":$_filename"; then return 0; fi

   ORK_SOURCE_PATH="$ORK_SOURCE_PATH:$_filename"
   source $_filename

   if [ "$?" != "0" ]; then
      echo "$EXECUTOR: orkhideya: inclusion failure (fatal): $_library ($_filename)" 1>&2
      exit 1
   fi

   return 0
}

# ascii tbd
# modify this variable if you care about where things go
if [ -z "$ORK_ROOT" ]; then
   ORK_ROOT="/usr/local/lib/orkhideya"
fi

# modify these variables if you care a lot more about where things go
if [ -z "$ORK_ETC_GLOBAL" ]; then
   ORK_ETC_GLOBAL="etc"
fi

if [ -z "$ORK_ETC_LOCAL" ]; then
   ORK_ETC_LOCAL="$HOME/local/etc/orkhideya"
fi

if [ -z "$ORK_BIN" ]; then
   ORK_BIN="bin"
fi

if [ -z "$ORK_VAR" ]; then
   ORK_VAR="var"
fi

if [ -z "$ORK_TMP" ]; then
   ORK_TMP="tmp"
fi

if [ -z "$ORK_INCLUDE" ]; then
   ORK_INCLUDE="include"
fi

if [ -z "$ORK_CONFIG_GLOBAL" ]; then
   ORK_CONFIG_GLOBAL="/etc/orkhideya/config"
fi

if [ -z "$ORK_CONFIG_LOCAL" ]; then
   ORK_CONFIG_LOCAL="$HOME/.orkhideya"
fi

# allow these base variables to be overwritten by the system or user
if [ -r "$ORK_CONFIG_GLOBAL" ]; then
   source "$ORK_CONFIG_GLOBAL"
fi

if [ -f "$ORK_CONFIG_LOCAL" -a -r "$ORK_CONFIG_LOCAL" ]; then
   source "$ORK_CONFIG_LOCAL"
fi

# make sure the root path is in the orkhideya path 
if [ -z "$ORK_PATH" ]; then
   ORK_PATH="$(ork_pathroot 'path')"
else
   ORK_PATH="$ORK_PATH:$(ork_pathroot 'path')"
fi
